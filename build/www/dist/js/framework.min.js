/*!
  * Application : bonziworld
  * Version     : 4.62.3858
  * Release     : 25ff9e97e3e640de1e8e16b9033d6199e98e9e3f
  * Website     : https://www.bonzi.world
  * Module      : Framework
  * Built       : 2020-04-30T18:16:46-0400
  * Environment : development
!*/
var SAPI_PORT = 2095;
var admin = false;
var adElement = "#ap_iframe";
window.sapi = true;
function updateAds() {
    var height = $(window).height() - $(adElement).height(),
        hideAd = height <= 250;
    hideAd && (height = $(window).height()), $(adElement)[hideAd ? "hide" : "show"](), $("#content").height(height);
}
function getRange(begin, end) {
    for (var array = [], i = begin; i <= end; i++) array.push(i);
    for (i = begin; i >= end; i--) array.push(i);
    return array;
}
function Agent(name, args) {
    if (name && args) {
        var defaultSize = { x: 200, y: 160 };
        (this.size = args.size || defaultSize || { x: 200, y: 160 }),
            (this.overlayOffset = { left: 0, top: 0 }),
            args.size.x !== defaultSize.x && (this.overlayOffset.left = parseInt(((defaultSize.x - this.size.x) / 2).toFixed(2), 10)),
            args.size.y !== defaultSize.y && (this.overlayOffset.top = parseInt(((defaultSize.y - this.size.y) / 2).toFixed(2), 10)),
            (this.name = name.trim()),
            (this.slug = this.name.toLowerCase()),
            (this.src = `/img/bonzi/${this.slug}${(window.environment, "")}.png`),
            "clippy" !== this.slug && (this.src = `/img/bonzi/${this.slug}.png`),
            "bonzi" === this.slug && (this.src = "/img/bonzi/purple.png"),
            (args.frameSize = args.frameSize || (args.sprite && args.sprite.frames) || { width: 200, height: 160 }),
            (this.size = this.size || args.frameSize),
            (this.extras = this.extras || {}),
            (this.frames = args.frameSize || this.size),
            (this.ticks = args.ticks || (args.sprite && args.sprite.ticks) || {}),
            (this.animations = args.animations || (args.sprite && args.sprite.animations) || {});
    }
}
function BZWAgents() {
    this._agents = [];
}
$(function () {
    $(window).on("load", updateAds), $(window).resize(updateAds), $("body").on("DOMNodeInserted", adElement, updateAds), $("body").on("DOMNodeRemoved", adElement, updateAds);
}),
    console.log("Loading All Agents"),
    (Agent.prototype.getTicks = function (animation, def) {
        return isNaN(def) && !def && (def = 15), animation && this.ticks ? (this.animations[animation] && this.animations[animation].ticks ? this.animations[animation].ticks : _.get(this, `ticks.${animation}`, 15)) : def;
    }),
    (BZWAgents.prototype.addAgent = function (agent) {
        agent && (this._agents.push(agent), (this[agent.name] = agent));
    }),
    (BZWAgents.prototype.getAgent = function (name) {
        if (name) { 
            return (
                ["black", "blue", "brown", "green", "purple", "magenta", "red", "pink", "pope", "cyan", "yellow"].includes(name.toLowerCase()) && (name = "Bonzi"),
                _.find(this._agents, function (agent) {
                    return name.toLowerCase() === agent.slug;
                }) || this.Bonzi
            );
        }
    }),
    (BZWAgents.prototype.getAgents = function () {
        return this._agents || [];
    }),
    (window.bzwAgents = window.bzwAgents || new BZWAgents());
var clippy = new Agent("Clippy", {
        size: { x: 124, y: 93 },
        frameSize: { width: 124, height: 93 },
        extras: { nameplateOffset: 15 },
        animations: {
            idle: 0,
            surf_away: { frames: range(360, 412), next: "gone", ticks: 52, speed: 1},
            surf_intro: { frames: range(823, 848), next: "idle", ticks: 25, speed: 1},
            backflip: { frames: range(0, 901), next: "idle", ticks: 901, speed: 1},
            look_left_fwd: [193, 196, "look_left_still", 1],
            look_left_still: 196,
            look_left_back: { frames: range(196, 193), next: "idle", speed: 1},
            praise_fwd: [199, 214, "praise_still", 1],
            praise_still: 215,
            praise_back: { frames: range(205, 199), next: "idle", speed: 1},
            gone: 902,
        },
    }),
    clippy2 = new Agent("Red_Clippy", {
        size: { x: 124, y: 93 },
        frameSize: { width: 124, height: 93 },
        extras: { nameplateOffset: 15 },
        animations: {
            idle: 0,
            surf_away: { frames: range(360, 412), next: "gone", ticks: 52, speed: 1},
            surf_intro: { frames: range(823, 848), next: "idle", ticks: 25, speed: 1},
            backflip: { frames: range(0, 901), next: "idle", ticks: 901, speed: 1},
            look_left_fwd: [193, 196, "look_left_still", 1],
            look_left_still: 196,
            look_left_back: { frames: range(196, 193), next: "idle", speed: 1},
            praise_fwd: [199, 214, "praise_still", 1], 
            praise_still: 215,
            praise_back: { frames: range(205, 199), next: "idle", speed: 1},
            gone: 902,
        },
    }),
    dtv = new Agent("Dtv", {
        size: { x: 128, y: 80 },
        frameSize: { width: 128, height: 80 },
        extras: { nameplateOffset: 15 },
        animations: {
            idle: 0,
            surf_away: { frames: range(0, 0), next: "gone", ticks: 52, speed: 1},
            surf_intro: { frames: range(0, 0), next: "idle", ticks: 25, speed: 1},
			gone: 0,
        },
    }),
    pm = new Agent("Pm", {
        size: { x: 130, y: 160 },
        frameSize: { width: 130, height: 160 },
        extras: { nameplateOffset: 15 },
        animations: {
            idle: 0,
            surf_away: { frames: range(28, 1), next: "gone", ticks: 52, speed: 1},
            surf_intro: { frames: range(1, 28), next: "idle", ticks: 25, speed: 1},
            backflip: { frames: range(0, 901), next: "idle", ticks: 901, speed: 1},
            look_left_fwd: [193, 196, "look_left_still", 1],
            look_left_still: 196,
            look_left_back: { frames: range(196, 193), next: "idle", speed: 1},
            praise_fwd: [199, 214, "praise_still", 1],
            praise_still: 215,
            praise_back: { frames: range(205, 199), next: "idle", speed: 1},
            gone: 9999,
        },
    }),
    james = new Agent("James", {
        size: { x: 150, y: 187 },
        frameSize: { width: 150, height: 187 },
        extras: { nameplateOffset: 15 },
        animations: {
            idle: 0,
            surf_away: { frames: range(210, 235), next: "gone", ticks: 52, speed: 1},
            surf_intro: { frames: range(120, 137), next: "idle", ticks: 25, speed: 1},
            backflip: { frames: range(0, 901), next: "idle", ticks: 901, speed: 1},
            look_left_fwd: [193, 196, "look_left_still", 1],
            look_left_still: 196,
            look_left_back: { frames: range(196, 193), next: "idle", speed: 1},
            praise_fwd: [199, 214, "praise_still", 1],
            praise_still: 215,
            praise_back: { frames: range(205, 199), next: "idle", speed: 1},
            shrug_fwd: [1, 9, "shrug_still", 1],
            shrug_still: 9,
            shrug_back: { frames: range(9, 1), next: "idle", speed: 1},
            gone: 9999,
        },
    }),
    unbojih = new Agent("Unbojih", {
        size: { x: 414, y: 346 },
        frameSize: { width: 414, height: 346 },
        extras: { nameplateOffset: 20 },
        animations: {
            idle: 0,
            surf_away: { frames: [0,40,41,38,37,25], next: "gone", ticks: 52, speed: 0.3},	  
            surf_intro: { frames: [25,37,38,0,30,40,41], next: "idle", ticks: 25, speed: 0.3},
            backflip: { frames: range(0, 901), next: "idle", ticks: 901, speed: 1},
            look_left_fwd: [193, 196, "look_left_still", 1],
            look_left_still: 196,
            look_left_back: { frames: range(196, 193), next: "idle", speed: 1},
            greet_fwd: { frames: [0, 30], next: "greet_still", speed: 0.2},
            greet_still: 30,
            greet_back: { frames: [30, 0], next: "idle", speed: 1},
            grin_fwd: { frames: [0,70], next: "grin_still", speed: 0.2},
            grin_still: 70,
            grin_back: { frames: [70,0], next: "idle", speed: 0.2},
            banana_fwd: { frames: [0,0,0,0,59,59,59,59,60,60,60,61,61,61,62,62,63,63,63], next: "idle", speed: 0.5},
            banana_back: { frames: [58,0], next: "idle", speed: 0.5},
            laugh_fwd: { frames: [0,68], next: "laugh_still", speed: 0.5},
            laugh_still: { frames: [68], next: "laugh_still", speed: 0.5}, 
            laugh_back: { frames: [68,0], next: "idle", speed: 0.5},
            surprised_fwd: { frames: range(12, 12), next: "surprised_still", speed: 1},
            surprised_still: 12,
            surprised_back: { frames: range(12, 12), next: "idle", speed: 1},
            sad_fwd: { frames: [0,69], next: "sad_still", speed: 1},
            sad_still: 69,
            sad_back: { frames: [69,0], next: "idle", speed: 1},
            praise_fwd: [199, 214, "praise_still", 1],
            praise_still: 215,
            praise_back: { frames: range(205, 199), next: "idle", speed: 1},
            gone: 25,
        },
    }),
    unbojih2 = new Agent("UnbojihPope", {
        size: { x: 414, y: 346 },
        frameSize: { width: 414, height: 346 },
        extras: { nameplateOffset: 20 },
        animations: {
            idle: 0,
            surf_away: { frames: [0,40,41,38,37,25], next: "gone", ticks: 52, speed: 0.3},	  
            surf_intro: { frames: [25,37,38,0,30,40,41], next: "idle", ticks: 25, speed: 0.3},
            backflip: { frames: range(0, 901), next: "idle", ticks: 901, speed: 1},
            look_left_fwd: [193, 196, "look_left_still", 1],
            look_left_still: 196,
            look_left_back: { frames: range(196, 193), next: "idle", speed: 1},
            greet_fwd: { frames: [0, 30], next: "greet_still", speed: 0.2},
            greet_still: 30,
            greet_back: { frames: [30, 0], next: "idle", speed: 1},
            grin_fwd: { frames: [0,70], next: "grin_still", speed: 0.2},
            grin_still: 70,
            grin_back: { frames: [70,0], next: "idle", speed: 0.2},
            banana_fwd: { frames: [0,0,0,0,59,59,59,59,60,60,60,61,61,61,62,62,63,63,63], next: "idle", speed: 0.5},
            banana_back: { frames: [58,0], next: "idle", speed: 0.5},
            laugh_fwd: { frames: [0,68], next: "laugh_still", speed: 0.5},
            laugh_still: { frames: [68], next: "laugh_still", speed: 0.5}, 
            laugh_back: { frames: [68,0], next: "idle", speed: 0.5},
            surprised_fwd: { frames: range(12, 12), next: "surprised_still", speed: 1},
            surprised_still: 12,
            surprised_back: { frames: range(12, 12), next: "idle", speed: 1},
            sad_fwd: { frames: [0,69], next: "sad_still", speed: 1},
            sad_still: 69,
            sad_back: { frames: [69,0], next: "idle", speed: 1},
            praise_fwd: [199, 214, "praise_still", 1],
            praise_still: 215,
            praise_back: { frames: range(205, 199), next: "idle", speed: 1},
            gone: 25,
        },
    }),
    pm2 = new Agent("PmPope", {
        size: { x: 130, y: 160 },
        frameSize: { width: 130, height: 160 },
        extras: { nameplateOffset: 15 },
        animations: {
            idle: 0,
            surf_away: { frames: range(28, 1), next: "gone", ticks: 52, speed: 1},
            surf_intro: { frames: range(1, 28), next: "idle", ticks: 25, speed: 1},
            backflip: { frames: range(0, 901), next: "idle", ticks: 901, speed: 1},
            look_left_fwd: [193, 196, "look_left_still", 1],
            look_left_still: 196,
            look_left_back: { frames: range(196, 193), next: "idle", speed: 1},
            praise_fwd: [199, 214, "praise_still", 1],
            praise_still: 215,
            praise_back: { frames: range(205, 199), next: "idle", speed: 1},
            gone: 9999,
        },
    }),
    links = new Agent("Links", {
        size: { x: 124, y: 93 },
        frameSize: { width: 124, height: 93 },
        extras: { nameplateOffset: 15 },
        animations: {
            idle: 0,
            surf_away: { frames: range(360, 412), next: "gone", ticks: 52, speed: 1},
            surf_intro: { frames: range(823, 848), next: "idle", ticks: 25, speed: 1},
            backflip: { frames: range(0, 901), next: "idle", ticks: 901, speed: 1},
            look_left_fwd: [193, 196, "look_left_still", 1],
            look_left_still: 196,
            look_left_back: { frames: range(196, 193), next: "idle", speed: 1},
            praise_fwd: [199, 214, "praise_still", 1],
            praise_still: 215,
            praise_back: { frames: range(205, 199), next: "idle", speed: 1},
            gone: 902,
        },
    }),
    logo = new Agent("Logo", {
        size: { x: 124, y: 93 },
        frameSize: { width: 124, height: 93 },
        extras: { nameplateOffset: 15 },
        animations: {
            idle: 12, 
            earth_fwd: { frames: [11,122,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91], next: "earth_still", ticks: 52, speed: 1.2},
            earth_still: { frames: [77,78,79,80,81,82,83,84,85,86,87,88,89,90,91], next: "earth_still", ticks: 130, speed: 1.2},
            earth_back: { frames: range(79,72), next: "idle", ticks: 52, speed: 1},
            surf_away: { frames: [11,122,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,109,123,9,8,7,6,5,4,3,2,1,0], next: "gone", ticks: 80, speed: 1.2},
            surf_intro: { frames: range(0, 70), next: "idle", ticks: 160, speed: 1.2},
            backflip: { frames: range(0, 901), next: "idle", ticks: 901, speed: 1},
            look_left_fwd: [193, 196, "look_left_still", 1],
            look_left_still: 196,
            look_left_back: { frames: range(196, 193), next: "idle", speed: 1},
            greet_fwd: [220, 230, "idle", 1],
            praise_fwd: [135, 140, "praise_still", 1.5], 	
            praise_still: 140, 	
            praise_back: { frames: range(140, 135), next: "idle", speed: 1},
            gone: 902,
        },
    }),
    robby = new Agent("Robby", {
        size: { x: 128, y: 128 },
        frameSize: { width: 128, height: 128 },
        extras: { nameplateOffset: 15 },
        animations: {
            idle: 0,
            surf_away: { frames: range(69, 53), next: "gone", ticks: 52, speed: 0.8},
            surf_intro: { frames: range(53, 69), next: "idle", ticks: 25, speed: 1},
            backflip: { frames: range(0, 901), next: "idle", ticks: 901, speed: 1},
            look_left_fwd: [193, 196, "look_left_still", 1],
            look_left_still: 196,
            look_left_back: { frames: range(196, 193), next: "idle", speed: 1},
            shrug_fwd: [23, 37, "shrug_still", 1],
            shrug_still: 37,
            shrug_back: { frames: range(46, 52), next: "idle", speed: 1},
            praise_fwd: [199, 214, "praise_still", 1],
            praise_still: 215,
            praise_back: { frames: range(205, 199), next: "idle", speed: 1},
            gone: 902,
        },
    }),
    genius = new Agent("Genius", {
        size: { x: 124, y: 93 },
        frameSize: { width: 124, height: 93 },
        extras: { nameplateOffset: 15 },
        animations: {
            idle: 0,
            surf_away: { frames: range(52, 54), next: "gone", ticks: 52, speed: 1},
            surf_intro: { frames: range(54, 52), next: "idle", ticks: 25, speed: 1},
            backflip: { frames: range(0, 901), next: "idle", ticks: 901, speed: 1},
            look_left_fwd: [193, 196, "look_left_still", 1],
            look_left_still: 196,
            look_left_back: { frames: range(196, 193), next: "idle", speed: 1},
            praise_fwd: [199, 214, "praise_still", 1],
            praise_still: 215,
            praise_back: { frames: range(205, 199), next: "idle", speed: 1},
            gone: 902,
        },
    }),
    rocky = new Agent("Rocky", {
        size: { x: 124, y: 93 },
        frameSize: { width: 124, height: 93 },
        extras: { nameplateOffset: 15 },
        animations: {
            idle: 0,
            surf_away: { frames: range(360, 412), next: "gone", ticks: 52, speed: 1},
            surf_intro: { frames: range(823, 848), next: "idle", ticks: 25, speed: 1},
            backflip: { frames: range(0, 901), next: "idle", ticks: 901, speed: 1},
            look_left_fwd: [193, 196, "look_left_still", 1],
            look_left_still: 196,
            look_left_back: { frames: range(196, 193), next: "idle", speed: 1},
            praise_fwd: [199, 214, "praise_still", 1],
            praise_still: 215,
            praise_back: { frames: range(205, 199), next: "idle", speed: 1},
            gone: 902,
        },
    }),
    f1 = new Agent("F1", {
        size: { x: 124, y: 93 },
        frameSize: { width: 124, height: 93 },
        extras: { nameplateOffset: 15 },
        animations: {
            idle: 0,
            surf_away: { frames: range(622, 588), next: "gone", ticks: 52, speed: 1},
            surf_intro: { frames: range(588, 622), next: "idle", ticks: 25, speed: 1},
            backflip: { frames: range(0, 901), next: "idle", ticks: 901, speed: 1},
            look_left_fwd: [193, 196, "look_left_still", 1],
            look_left_still: 196,
            look_left_back: { frames: range(196, 193), next: "idle", speed: 1},
            praise_fwd: [199, 214, "praise_still", 1],
            praise_still: 215,
            praise_back: { frames: range(205, 199), next: "idle", speed: 1},
            gone: 902,
        },
    }),
    max = new Agent("Max", {
        size: { x: 168, y: 142 },
        frameSize: { width: 168, height: 142 },
        extras: { nameplateOffset: 15 },
        animations: {
            idle: 0,
            surf_away: { frames: range(96, 115), next: "gone", ticks: 52, speed: 1},
            surf_intro: { frames: range(196, 218), next: "idle", ticks: 25, speed: 1},
            backflip: { frames: range(0, 901), next: "idle", ticks: 901, speed: 1},
            look_left_fwd: [193, 196, "look_left_still", 1],
            look_left_still: 196,
            look_left_back: { frames: range(196, 193), next: "idle", speed: 1},
            shrug_fwd: [10, 17, "shrug_still", 1],
            shrug_still: 17,
            shrug_back: { frames: range(17, 10), next: "idle", speed: 1 },
            surf_across_fwd: [156, 163, "surf_across_still", 1],
            surf_across_still: 163,
            surf_across_back: { frames: range(164, 166), next: "idle", speed: 1 },
            surf_across_swap_fwd: [168, 175, "surf_across_still", 1],
            surf_across_swap_still: 175,
            surf_across_swap_back: { frames: range(180, 183), next: "idle", speed: 1 },
			greet_fwd: [25, 29, "greet_still", 1],
			greet_still: 29,
            greet_back: { frames: range(29, 25), next: "idle", speed: 1 },
			grin_fwd: [275, 288, "grin_still", 1],
			grin_still: 282,
            grin_back: { frames: range(282, 275), next: "idle", speed: 1 },
			surprised_fwd: [234, 240, "surprised_still", 1],
			surprised_still: 240,
            surprised_back: { frames: range(249, 251), next: "idle", speed: 1 },
            praise_fwd: [88, 91, "praise_still", 1],
            praise_still: 91,
            praise_back: { frames: range(91, 88), next: "idle", speed: 1},
            gone: 902,
        },
    }),
    max2 = new Agent("MaxPope", {
        size: { x: 168, y: 140 },
        frameSize: { width: 168, height: 140 },
        extras: { nameplateOffset: 15 },
        animations: {
            idle: 0,
            surf_away: { frames: range(360, 412), next: "gone", ticks: 52, speed: 1},
            surf_intro: { frames: range(823, 848), next: "idle", ticks: 25, speed: 1},
            backflip: { frames: range(0, 901), next: "idle", ticks: 901, speed: 1},
            look_left_fwd: [193, 196, "look_left_still", 1],
            look_left_still: 196,
            look_left_back: { frames: range(196, 193), next: "idle", speed: 1},
            shrug_fwd: [10, 17, "shrug_still", 1],
            shrug_still: 17,
            shrug_back: { frames: range(17, 10), next: "idle", speed: 1 },
			greet_fwd: [25, 29, "greet_still", 1],
			greet_still: 29,
            greet_back: { frames: range(29, 25), next: "idle", speed: 1 },
            praise_fwd: [199, 214, "praise_still", 1],
            praise_still: 215,
            praise_back: { frames: range(205, 199), next: "idle", speed: 1},
            gone: 902,
        },
    }),
    peedy = new Agent("Peedy", {
        size: { x: 160, y: 128 },
        frameSize: { width: 160, height: 128 },
        extras: { nameplateOffset: 15 },
        animations: {
            idle: 0,
            surf_away: { frames: range(360, 412), next: "gone", ticks: 52, speed: 1},
            surf_intro: { frames: range(823, 848), next: "idle", ticks: 25, speed: 1},
            backflip: { frames: range(0, 901), next: "idle", ticks: 901, speed: 1},
            look_left_fwd: [193, 196, "look_left_still", 1],
            look_left_still: 196,
            look_left_back: { frames: range(196, 193), next: "idle", speed: 1},
            praise_fwd: [199, 214, "praise_still", 1],
            praise_still: 215,
            praise_back: { frames: range(205, 199), next: "idle", speed: 1},
            gone: 902,
        },
    }),
    peedy_pope = new Agent("Peedy_Pope", {
        size: { x: 160, y: 128 },
        frameSize: { width: 160, height: 128 },
        extras: { nameplateOffset: 15 },
        animations: {
            idle: 0,
            surf_intro: { frames: range(45, 23), next: "idle", speed: 0.6 },
            surf_intro_emote: { frames: range(45, 23), next: "idle", speed: 0.6 },
            surf_away: [23, 45, "gone", 1],
            surf_away_emote: [23, 40, "gone_emote", 0.8],
            backflip: { frames: range(0, 901), next: "idle", ticks: 901, speed: 1},
            look_left_fwd: [193, 196, "look_left_still", 1],
            look_left_still: 196,
            look_left_back: { frames: range(196, 193), next: "idle", speed: 1},
            praise_fwd: [199, 214, "praise_still", 1],
            praise_still: 215,
            praise_back: { frames: range(205, 199), next: "idle", speed: 1},
            gone: 902,
        },
    }),
    rover = new Agent("Rover", {
        size: { x: 80, y: 80 },
        frameSize: { width: 80, height: 80 },
        extras: { nameplateOffset: 15 },
        animations: {
            idle: 0,
            surf_intro: { frames: range(45, 23), next: "idle", speed: 0.6 },
            surf_intro_emote: { frames: range(45, 23), next: "idle", speed: 0.6 },
            surf_away: [23, 45, "gone", 1],
            surf_away_emote: [23, 40, "gone_emote", 0.8],
            backflip: { frames: range(0, 901), next: "idle", ticks: 901, speed: 1},
            look_left_fwd: [193, 196, "look_left_still", 1],
            look_left_still: 196,
            look_left_back: { frames: range(196, 193), next: "idle", speed: 1},
            praise_fwd: [199, 214, "praise_still", 1],
            praise_still: 215,
            praise_back: { frames: range(205, 199), next: "idle", speed: 1},
            gone: 902,
        },
    }),
    rover2 = new Agent("Dogpope", {
        size: { x: 80, y: 80 },
        frameSize: { width: 80, height: 80 },
        extras: { nameplateOffset: 15 },
        animations: {
            idle: 0,
            surf_intro: { frames: range(45, 23), next: "idle", speed: 0.6 },
            surf_intro_emote: { frames: range(45, 23), next: "idle", speed: 0.6 },
            surf_away: [23, 45, "gone", 1],
            surf_away_emote: [23, 40, "gone_emote", 0.8],
            backflip: { frames: range(0, 901), next: "idle", ticks: 901, speed: 1},
            look_left_fwd: [193, 196, "look_left_still", 1],
            look_left_still: 196,
            look_left_back: { frames: range(196, 193), next: "idle", speed: 1},
            praise_fwd: [199, 214, "praise_still", 1],
            praise_still: 215,
            praise_back: { frames: range(205, 199), next: "idle", speed: 1},
            gone: 902,
        },
    }),
    merlin = new Agent("Merlin", {
        size: { x: 128, y: 128 },
        frameSize: { width: 128, height: 128 },
        extras: { nameplateOffset: 15 },
        animations: {
            idle: 0,
            surf_away: { frames: range(360, 412), next: "gone", ticks: 52, speed: 1},
            surf_intro: { frames: range(823, 848), next: "idle", ticks: 25, speed: 1},
            backflip: { frames: range(0, 901), next: "idle", ticks: 901, speed: 1},
            look_left_fwd: [193, 196, "look_left_still", 1],
            look_left_still: 196,
            look_left_back: { frames: range(196, 193), next: "idle", speed: 1},
            praise_fwd: [199, 214, "praise_still", 1],
            praise_still: 215,
            praise_back: { frames: range(205, 199), next: "idle", speed: 1},
            gone: 902,
        },
    }),
    genie = new Agent("Genie", {
        size: { x: 128, y: 128 },
        frameSize: { width: 128, height: 128 },
        extras: { nameplateOffset: 15 },
        animations: {
            idle: 0,
            surf_away: { frames: range(360, 412), next: "gone", ticks: 52, speed: 1},
            surf_intro: { frames: range(823, 848), next: "idle", ticks: 25, speed: 1},
            backflip: { frames: range(0, 901), next: "idle", ticks: 901, speed: 1},
            look_left_fwd: [193, 196, "look_left_still", 1],
            look_left_still: 196,
            look_left_back: { frames: range(196, 193), next: "idle", speed: 1},
            praise_fwd: [199, 214, "praise_still", 1],
            praise_still: 215,
            praise_back: { frames: range(205, 199), next: "idle", speed: 1},
            gone: 902,
        },
    });
function FPSCtrl(fps, frameCallback, tickCallback) {
    (fps = fps || 30),
        (this.fps = fps),
        (this.delay = 1e3 / this.fps),
        (this.time = null),
        (this.frame = -1),
        this.tref,
        (this.frameCallback = frameCallback || function () {}),
        (this.tickCallback = tickCallback || function () {}),
        (this.isPlaying = !1),
        (this.initialized = !1),
        (this.hasFocus = !0);
}
function _fpsInitalize() {
    const self = this;
    self.initialized ||
        (window.addEventListener("focus", function () {
            self.focusCheck(), self.windowFocused();
        }),
        window.addEventListener("blur", function () {
            self.focusCheck(), self.windowUnfocused();
        }));
}
function _fpsIsFocused() {
    const self = this;
    try {
        self.hasFocus = document.hasFocus() || (document.getElementById("iframe") && document.getElementById("iframe").contentWindow.document.hasFocus()) || !1;
    } catch (err) {
        console.error(err), (self.hasFocus = !1);
    }
    return self.hasFocus;
}
function _fpsWindowFocused() {
    this.setFPS(15), this.redrawAllBonzis(!0);
}
function redrawAllBonzis(skipVideo) {
    _.forIn(bonzis, function (b) {
        b.checkSprite();
    });
}
function _fpsWindowUnfocused() {
    this.setFPS(15);
}
function _fpsLoop(timestamp) {
    const self = this;
    null === self.time && (self.time = timestamp);
    var seg = Math.floor((timestamp - self.time) / self.delay);
    seg > self.frame && ((self.frame = seg), self.frameCallback({ time: timestamp, frame: self.frame })), self.tickCallback({ time: timestamp, frame: self.frame }), (self.tref = requestAnimationFrame(self.loop.bind(self)));
}
function _fpsSetFrameRate(frameRate) {
    if (!frameRate || "number" != typeof frameRate) return frameRate;
    if (frameRate > 60) throw new Error("Unable to set framerate > 60 FPS");
    (this.fps = frameRate), (this.delay = 1e3 / this.fps), (this.frame = -1), (this.time = null);
}
function _fpsStartLoop() {
    this.isPlaying || (this.initialize(), (this.isPlaying = !0), (this.tref = requestAnimationFrame(this.loop.bind(this))));
}
function _fpsPauseLoop() {
    this.isPlaying && ((this.isPlaying = !1), cancelAnimationFrame(this.tref), (this.time = null), (this.frame = -1));
}
window.bzwAgents.addAgent(clippy),
    window.bzwAgents.addAgent(clippy2),
    window.bzwAgents.addAgent(dtv),
    window.bzwAgents.addAgent(rocky),
    window.bzwAgents.addAgent(links),
    window.bzwAgents.addAgent(logo),
    window.bzwAgents.addAgent(genius),
    window.bzwAgents.addAgent(f1),
    window.bzwAgents.addAgent(pm),
    window.bzwAgents.addAgent(james),
    window.bzwAgents.addAgent(max),
    window.bzwAgents.addAgent(pm2),
    window.bzwAgents.addAgent(max2),
    window.bzwAgents.addAgent(peedy),
    window.bzwAgents.addAgent(peedy_pope),
    window.bzwAgents.addAgent(rover),
    window.bzwAgents.addAgent(unbojih),
    window.bzwAgents.addAgent(unbojih2),
    window.bzwAgents.addAgent(rover2),
    window.bzwAgents.addAgent(merlin),
    window.bzwAgents.addAgent(genie),
	window.bzwAgents.addAgent(robby),
    (FPSCtrl.prototype.initialize = _fpsInitalize),
    (FPSCtrl.prototype.loop = _fpsLoop),
    (FPSCtrl.prototype.setFPS = _fpsSetFrameRate),
    (FPSCtrl.prototype.setFrameRate = _fpsSetFrameRate),
    (FPSCtrl.prototype.start = _fpsStartLoop),
    (FPSCtrl.prototype.stop = _fpsPauseLoop),
    (FPSCtrl.prototype.pause = _fpsPauseLoop),
    (FPSCtrl.prototype.focusCheck = _fpsIsFocused),
    (FPSCtrl.prototype.isFocused = _fpsIsFocused),
    (FPSCtrl.prototype.windowFocused = _fpsWindowFocused),
    (FPSCtrl.prototype.windowUnfocused = _fpsWindowUnfocused),
    (FPSCtrl.prototype.redrawAllBonzis = redrawAllBonzis),
    (window.redrawAllBonzis = redrawAllBonzis),
    setInterval(function () {
        window.redrawAllBonzis(!0);
    }, 3e4);
var BonziData = {
    size: { x: 200, y: 160 },
    sprite: {
        frames: { width: 200, height: 160 },
        ticks: { backflip: 15, cool_fwd: 30, grin_fwd: 15, surf_intro: 30, surf_away: 30, praise_fwd: 15, praise_back: 15, shrug_back: 15, earth_fwd: 15, earth_back: 15, shrug_fwd: 15 },
        animations: {
            idle: 0,
                    sad_fwd: [237, 241, "sad_still", 0.8],
                    sad_still: 241,
                    think_fwd: [242, 247, "think_still", 0.8],
                    think_still: 247,
                    confused_still: 137,
                    surf_across_still: 8,
                    surf_across_back: { frames: range(8, 12), next: "idle", speed: 0.7 },
                    sad_back: { frames: range(239, 237), next: "idle", speed: 0.8 },
                    confused_fwd: [127, 137, "confused_still", 0.7],
                    think_back: { frames: range(247, 242), next: "idle", speed: 0.8 },
                    confused_back: { frames: range(137, 127), next: "idle", speed: 0.7 },
            surf_back_swap_fwd: [1218, 1226, "surf_back_still", 1],
            surf_back_swap_back: [1227, 1232, "surf_across_swap_fwd", 1],
            surf_back_swap_still: 1222,
            surf_back_fwd: [1212, 1226, "surf_back_still", 1],
            surf_back_back: [1226, 1232, "surf_across_swap_fwd", 1],
            surf_back_still: 1226,
            surf_across_swap_fwd: [1203, 1211, "surf_across_still", 1],
            surf_across_swap_back: [1211, 1203, "surf_back_swap_fwd", 1],
            surf_across_swap_still: 1211,
            surf_across_fwd: [1202, 1211, "surf_across_still", 1],
            surf_across_still: 1211,
            surf_across_back: { frames: range(1211, 1218), next: "idle", speed: 1 },
            clap_fwd: [10, 12, "clap_still", 1],
            clap_still: [13, 15, "clap_still", 1],
            clap_back: { frames: range(12, 10), next: "idle", speed: 1 },
            surf_intro: [1139, 1163, "idle", 1],
            surf_away: [1165, 1188, "gone", 1],
            gone: 1139,
            banana_fwd: [344, 354, "idle", 0.6],
            surprised_fwd: [356, 360, "surprised_still", 0.8],
            laugh_fwd: [1019, 1023, "laugh_still", 0.8],
            write_fwd: [365, 377, "write_still", 0.8],
            greet_fwd: [225, 232, "greet_still", 1],
            greet_still: 232,
            greet_back: { frames: range(232, 225), next: "idle", speed: 1 },
            write_once_fwd: [365, 400, "write_once_still", 0.8],
            write_infinite_fwd: [365, 396, "write_infinite", 0.8],
            write_infinite: [381, 396, "write_infinite", 0.8],
            write_still: 377,
            write_once_still: 401,
            write_back: { frames: range(378, 366), next: "idle", speed: 0.8 },
            laugh_back: { frames: range(1021, 1019), next: "idle", speed: 0.8 },
            surprised_back: { frames: range(360, 356), next: "idle", speed: 0.8 },
            laugh_still: [1021, 1023, "laugh_still", 0.6],
            surprised_still: 360,
            banana_fwd: [826, 886, "idle", 0.6],
            beat_still: [104, 107, "beat_still", 0.6],
            beat_back: { frames: range(103, 101), next: "idle", speed: 1 },
            shrug_fwd: [28, 33, "shrug_still", 1],
            shrug_still: 33,
            shrug_back: { frames: range(33, 28), next: "idle", speed: 1 },
            //earth_fwd: [51, 57, "earth_still", 1],
            //earth_still: [58, 80, "earth_still", 1],
            //earth_back: [81, 86, "idle", 1],
            look_down_fwd: [87, 90, "look_down_still", 1],
            look_down_still: 91,
            look_down_back: { frames: range(90, 87), next: "idle", speed: 1 },
            lean_left_fwd: [94, 97, "lean_left_still", 1],
            lean_left_still: 98,
            lean_left_back: { frames: range(97, 94), next: "idle", speed: 1 },
            beat_fwd: [101, 103, "beat_still", 1],
            beat_still: [104, 107, "beat_still", 1],
            beat_back: { frames: range(103, 101), next: "idle", speed: 1 },
            cool_fwd: [438, 456, "cool_still", 1],
            cool_still: 456,
            cool_back: { frames: range(456, 438), next: "idle", speed: 1 }, 
            mute_fwd: { frames: [0,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,802,802,802,802,802,802,802,802,802,802,802,803,804,803,802,802,802,802,802,802,802,802,803,804,803,802,802,802,802,803,804,805], next: "mute_still", speed: 0.5}, 
			mute_still: { frames: [805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 813, 814, 815, 816, 817, 818, 819, 820, 819, 818, 817, 816, 815, 815, 816, 817, 818, 819, 820, 819, 818, 817, 816, 815, 814, 813], next: "mute_still", speed: 0.5 },
            mute_back: { frames: range(803, 786), next: "idle", speed: 0.5 }, 
			read_fwd: { frames: [208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,700,701,702,703,703,703,703,703,703,703,703,703,703,704,705,706,707,708,709,710,711,712,242,243,244,245,229,231,232,232,232,229,231,232,232,232,229,231,232,232,232,229,231,232,232,232,689,690,691,692], next: "read_still", speed: 0.7}, 
			read_still: { frames: [692], next: "read_still", speed: 0.7 },
            read_back: { frames: [713,714,715,225,224,223,222,221,220,219,218,217,216,215,669,670,671,672,673,674,675,676,677,0], next: "idle", speed: 0.7 },
            cool_right_fwd: [126, 128, "cool_right_still", 1],
            cool_right_still: 129,
            cool_right_back: { frames: range(128, 126), next: "idle", speed: 1 },
            cool_left_fwd: [131, 133, "cool_left_still", 1],
            cool_left_still: 134,
            cool_left_back: { frames: range(133, 131), next: "cool_still", speed: 1 },
            cool_adjust: { frames: [455, 454, 453, 452, 451, 465, 466, 135, 449, 450, 451, 452, 453, 454], next: "cool_still", speed: 1 },
            present_fwd: [137, 143, "present_still", 1],
            present_still: 143,
            present_back: { frames: range(143, 137), next: "idle", speed: 1 },
            look_left_fwd: [143, 145, "look_left_still", 1],
            look_left_still: 146,
            look_left_back: { frames: range(145, 143), next: "idle", speed: 1 },
            look_right_fwd: [149, 151, "look_right_still", 1],
            look_right_still: 152,
            look_right_back: { frames: range(151, 149), next: "idle", speed: 1 },
            lean_right_fwd: { frames: range(158, 156), next: "lean_right_still", speed: 1 },
            lean_right_still: 155,
            lean_right_back: [156, 158, "idle", 1],
            praise_fwd: [150, 154, "praise_still", 1],
            praise_still: 154,
            praise_back: { frames: range(154, 150), next: "idle", speed: 1 },
            grin_fwd: [1082, 1087, "grin_still", 1],
            grin_still: 1087,
            grin_back: { frames: range(1087, 1082), next: "idle", speed: 1 },
            alert_fwd: [190, 190, "alert_still", 1],
            alert_still: 190, 
            alert_back: { frames: [190, 0], next: "idle", speed: 1 },
            uncertain_fwd: [207, 213, "uncertain_still", 1],
            uncertain_still: 213,
            uncertain_back: { frames: range(213, 215), next: "idle", speed: 1 },
            backflip: [163, 176, "idle", 0.7],
            fly_fwd: [163, 168, "fly_still", 0.7],
            fly_still: [164, 171, "fly_still", 0.7],
            fly_back: [171, 176, "idle", 0.7],
        },
    },
    to_idle: {
        surf_back_fwd: "surf_back_back",
        surf_back_still: "surf_back_back",
        surf_across_fwd: "surf_across_back",
        surf_across_still: "surf_across_back",
        sad_fwd: "sad_back",
        sad_still: "sad_back",
        mute_fwd: "mute_back",
        mute_still: "mute_back",
        read_fwd: "read_back",
        read_still: "read_back",
        think_fwd: "think_back",
        think_still: "think_back",
        confused_fwd: "confused_back", 
        confused_still: "confused_back",
        clap_fwd: "clap_back",
        clap_still: "clap_back",
        shrug_fwd: "shrug_back",
        shrug_still: "shrug_back",
        alert_fwd: "alert_back",
        alert_still: "alert_back",
        uncertain_fwd: "uncertain_back",
        uncertain_still: "uncertain_back",
        fly_fwd: "fly_back",
        fly_still: "fly_back",
        earth_fwd: "earth_back",
        banana_fwd: "banana_back",
        surprised_fwd: "surprised_back",
        surprised_still: "surprised_back",
        laugh_fwd: "laugh_back",
        write_fwd: "write_back",
        greet_fwd: "greet_back",
        greet_still: "greet_back",
        write_once_fwd: "write_back",
        write_infinite_fwd: "write_back",
        write_infinite: "write_back",
        write_still: "write_back",
        write_once_still: "write_back",
        laugh_still: "laugh_back",
        beat_still: "beat_back",
        earth_still: "earth_back",
        look_down_fwd: "look_down_back",
        look_down_still: "look_down_back",
        lean_left_fwd: "lean_left_back",
        lean_left_still: "lean_left_back",
        beat_fwd: "beat_back",
        beat_still: "beat_back",
        cool_fwd: "cool_back",
        cool_still: "cool_back",
        cool_adjust: "cool_back",
        cool_left_fwd: "cool_left_back",
        cool_left_still: "cool_left_back",
        present_fwd: "present_back",
        present_still: "present_back",
        look_left_fwd: "look_left_back",
        look_left_still: "look_left_back",
        look_right_fwd: "look_right_back",
        look_right_still: "look_right_back",
        lean_right_fwd: "lean_right_back",
        lean_right_still: "lean_right_back",
        praise_fwd: "praise_back",
        praise_still: "praise_back",
        grin_fwd: "grin_back",
        grin_still: "grin_back",
        backflip: "idle",
        idle: "idle",
    },
    pass_idle: ["gone"],
    event_list_joke_open: [
        [
            { type: "text", text: "Yeah, of course {NAME} wants me to tell a joke." },
            { type: "anim", anim: "praise_fwd", ticks: 15 },
            { type: "text", text: '"Haha, look at the stupid {COLOR} MSAgent telling jokes!" Fuck you. It isn\'t funny.', say: "Hah hah! Look at the stupid {COLOR} microsoft agent telling jokes! Fuck you. It isn't funny." },
            { type: "anim", anim: "praise_back", ticks: 15 },
            { type: "text", text: "But I'll do it anyway. Because you want me to. I hope you're happy." },
        ],
        [{ type: "text", text: "{NAME} used /joke. Whoop-dee-fucking doo." }],
        [{ type: "text", text: "HEY YOU IDIOTS ITS TIME FOR A JOKE" }],
        [
            { type: "text", text: "Wanna hear a joke?" },
            { type: "text", text: "No?" },
            { type: "text", text: "Mute me then. That's your fucking problem." },
        ],
        [{ type: "text", text: "Senpai {NAME} wants me to tell a joke." }],
        [{ type: "text", text: "Time for whatever horrible fucking jokes the creator of this site wrote." }],
    ],
    event_list_joke_mid: [
        [
            { type: "text", text: "What is easy to get into, but hard to get out of?" },
            { type: "text", text: "Child support!" },
        ],
        [
            { type: "text", text: "Why do they call HTML HyperText?" },
            { type: "text", text: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" },
            { type: "anim", anim: "shrug_back", ticks: 15 },
            { type: "text", text: "Sorry. I just had an epiphany of my own sad, sad existence." },
        ],
        [
            {
                type: "text",
                text: 'Two sausages are in a pan. One looks at the other and says "Boy it\'s hot in here!" and the other sausage says "Unbelievable! It\'s a talking sausage!"',
                say: "Two sausages are in a pan. One looks at the other and says, Boy it's hot in here! and the other sausage says, Unbelievable! It's a talking sausage!",
            },
            { type: "anim", anim: "shrug_back", ticks: 15 },
            { type: "text", text: "What were you expecting? A dick joke? You're a sick fuck." },
        ],
        [
            { type: "text", text: "What is in the middle of Paris?" },
            { type: "text", text: "A giant inflatable buttplug." },
        ],
        [
            { type: "text", text: "What goes in pink and comes out blue?" },
            { type: "text", text: "Sonic's asshole." },
        ],
        [
            { type: "text", text: "What type of water won't freeze?" },
            { type: "text", text: "Your mother's." },
        ],
        [
            { type: "text", text: "Who earns a living by driving his customers away?" },
            { type: "text", text: "Nintendo!" },
        ],
        [
            { type: "text", text: "What did the digital clock say to the grandfather clock?" },
            { type: "text", text: "Suck my clock." },
        ],
        [
            { type: "text", text: "What do you call a man who shaves 10 times a day?" },
            { type: "text", text: "A woman." },
        ],
        [
            { type: "text", text: "How do you get water in watermelons?" },
            { type: "text", text: "Cum in them." },
        ],
        [
            { type: "text", text: "Why do we call money bread?" },
            { type: "text", text: "Because we KNEAD it. Haha please send money to my PayPal at nigerianprince99@bonzi.com" },
        ],
        [
            { type: "text", text: "What is a cow that eats grass?" },
            { type: "text", text: "ASS" },
            { type: "text", text: "I'm a comedic genius, I know." },
        ],
    ],
    event_list_joke_end: [
        [
            { type: "text", text: "You know {NAME}, a good friend laughs at your jokes even when they're not so funny." },
            { type: "text", text: "And you fucking suck. Thanks." },
        ],
        [{ type: "text", text: "Where do I come up with these? My ass?" }],
        [
            { type: "text", text: "Do I amuse you, {NAME}? Am I funny? Do I make you laugh?" },
            { type: "text", text: "pls respond", say: "please respond" },
        ],
        [{ type: "text", text: "Maybe I'll keep my day job, {NAME}. Patreon didn't accept me." }],
        [
            { type: "text", text: "Laughter is the best medicine!" },
            { type: "text", text: "Apart from meth." },
        ],
        [
            { type: "text", text: "Don't judge me on my sense of humor alone." },
            { type: "text", text: "Help! I'm being oppressed!" },
        ],
    ],
    event_list_fact_open: [
		[
			{ type: "html", text: "Hey kids, it's time for a Fun Fact&reg;!", say: "Hey kids, it's time for a Fun Fact!" }
		],
        [
            { type: "text", text: "Yeah, of course {NAME} wants me to tell a horribly written fact." },
            { type: "anim", anim: "praise_fwd", ticks: 15 },
            { type: "text", text: '"Haha, look at the stupid {COLOR} MSAgent telling horribly written facts!" Fuck you. It isn\'t funny.', say: "Hah hah! Look at the stupid {COLOR} microsoft agent telling horribly written facts! Fuck you. It isn't funny." },
            { type: "anim", anim: "praise_back", ticks: 15 },
            { type: "text", text: "But I'll do it anyway. Because you want me to. I hope you're happy." },
        ],
	],
    event_list_fact_mid: [
        [
            { type: "anim", anim: "earth_fwd", ticks: 15 },
            { type: "text", text: "Did you know that Uranus is 31,518 miles (50,724 km) in diameter?", say: "Did you know that Yer Anus is 31 thousand 500 and 18 miles in diameter?" },
            { type: "anim", anim: "earth_back", ticks: 15 },
            { type: "anim", anim: "grin_fwd", ticks: 15 },
        ],
        [
            { type: "anim", anim: "shrug_fwd", ticks: 20 },
            { type: "text", text: "Fun Fact: The skript kiddie of this site didn't bother checking if the text that goes into the dialog box is HTML code." },
            { type: "html", text: "<img src='/img/misc/topjej.png'></img>", say: "toppest jej" },
            { type: "idle" },
        ],
    ],
    event_list_fact_end: [[{ type: "text", text: "o gee whilickers wasn't that sure interesting huh" }]],
};
(BonziData.event_list_joke = [
    { type: "add_random", pool: "event_list_joke_open", add: BonziData.event_list_joke_open },
    { type: "anim", anim: "shrug_fwd", ticks: 20 },
    { type: "add_random", pool: "event_list_joke_mid", add: BonziData.event_list_joke_mid },
    { type: "idle" },
    { type: "add_random", pool: "event_list_joke_end", add: BonziData.event_list_joke_end },
    { type: "idle" },
]),
    (BonziData.event_list_fact = [ 
        { type: "add_random", pool: "event_list_fact_open", add: BonziData.event_list_fact_open },
        { type: "add_random", pool: "event_list_fact_mid", add: BonziData.event_list_fact_mid },
        { type: "idle" },
        { type: "add_random", pool: "event_list_fact_end", add: BonziData.event_list_fact_end },
        { type: "idle" },
    ]),
    (BonziData.event_list_triggered = [
        { type: "anim", anim: "cool_fwd", ticks: 30 },
        {
            type: "text",
            text: "I sexually identify as BonziBUDDY. Ever since I was a young gorilla I dreamed of invading desktops dropping hot sticky tootorals on disgusting PC users.",
            say: "I sexually identify as BonziBUDDY. Ever since I was a young gorilla I dreamed of invading desktops dropping hot sticky tootorals on disgusting PC users.",
        },
        {
            type: "text",
            text: "People say to me that a person being a BonziBUDDY is impossible and that I’m a fucking virus but I don’t care, I’m beautiful.",
            say: "People say to me that a person being a BonziBUDDY is impossible and that I'm a fucking virus but I dont care, I'm beautiful.",
        },
        {
            type: "text",
            text: "I’m having an IT intern install Internet Explorer 6, aquarium screensavers and PC Doctor 2016 on my body. From now on I want you guys to call me “Joel” and respect my right to meme from above and meme needlessly.",
            say: "I'm having an IT intern install Internet Explorer 6, aquarium screensavers and PC Doctor 2016 on my body. From now on I want you guys to call me Joel and respect my right to meme from above and meme needlessly.",
        },
        {
            type: "text",
            text: "If you can’t accept me you’re a gorillaphobe and need to check your file permissions. Thank you for being so understanding.",
            say: "If you cant accept me your a gorillaphobe and need to check your file permissions. Thank you for being so understanding.",
        },
        { type: "idle" },
    ]),
    (BonziData.event_list_linux = [
        { type: "text", text: "I'd just like to interject for a moment. What you’re referring to as Linux, is in fact, BONZI/Linux, or as I’ve recently taken to calling it, BONZI plus Linux." },
        {
            type: "text",
            text:
                "Linux is not an operating system unto itself, but rather another free component of a fully functioning BONZI system made useful by the BONZI corelibs, shell utilities and vital system components comprising a full OS as defined by M.A.L.W.A.R.E.",
        },
        {
            type: "text",
            text:
                "Many computer users run a modified version of the BONZI system every day, without realizing it. Through a peculiar turn of events, the version of BONZI which is widely used today is often called “Linux”, and many of its users are not aware that it is basically the BONZI system, developed by the BONZI Project.",
        },
        {
            type: "text",
            text:
                "There really is a Linux, and these people are using it, but it is just a part of the system they use. Linux is the kernel: the program in the system that allocates the machine’s memes to the other programs that you run. ",
        },
        { type: "text", text: "The kernel is an essential part of an operating system, but useless by itself; it can only function in the context of a complete operating system, such as systemd." },
        {
            type: "text",
            text:
                "Linux is normally used in combination with the BONZI operating system: the whole system is basically BONZI with Linux added, or BONZI/Linux. All the so-called “Linux” distributions are really distributions of BONZI/Linux.",
        },
    ]),
    (BonziData.event_list_pawn = [
        {
            type: "text",
            text:
                "Hi, my name is BonziBUDDY, and this is my website. I meme here with my old harambe, and my son, Clippy. Everything in here has an ad and a fact. One thing I've learned after 17 years - you never know what is gonna give you some malware.",
        },
    ]),
    (function () {
        const event_list_bees = [
            { type: "text", text: "According to all known laws" },
            { type: "anim", anim: "praise_fwd", ticks: 15 },
            { type: "text", text: "I'm a flaming homosexual." },
            { type: "anim", anim: "praise_back", ticks: 15 },
            { type: "anim", anim: "laugh_fwd", ticks: 25 },
            { type: "idle" },
        ];
        try {
            BonziData && (BonziData.event_list_bees = event_list_bees);
        } catch (err) {
            console.error(err);
        }
    })(),
    (window.BonziHandler = new (function () {
        var self = this;
        (this.framerate = 1 / 15),
            (this.spriteSheets = {}),
            (this.clearBonzi = function (id) {
                if (id)
                    try {
                        var bz = window.bonzis[id],
                            spr = _.find(window.BonziHandler.stage.children, { id: id }) || (bz && bz.sprite);
                        spr && window.BonziHandler.stage.removeChild(spr.sprite), $(`#app_wrapper > #bonzi_${id}`).remove();
                    } catch (err) {
                        console.log("Error clearing bonzi."), console.error(err);
                    }
            }),
            (this.prepSprites = function () {
                for (const color of [
                    "black",
                    "blue",
                    "brown",
                    "green",
                    "purple",
                    "bonzi",
					"magenta",
                    "red",
                    "pink",
                    "yellow",
                    "orange",
                    "white",
                    "dark_purple",
                    "cyan",
                    "glitch",
                    "glitchy",
                    "rainbow",
                    "buggiest",
                    "grey",
                    "soldier",
                    "diogo2",
                    "losky",
                    "unbojih",
                    "unbojihpope",
                    "owner",
                    "guestgal",
                    "clippy",
                    "genie",
                    "merlin",
                    "program",
                    "robot",
                    "kiddie",
                    "invisible",
                    "bruh",
                    "clippypope",
                    "donutpope",
                    "pmpope",
                    "qmark",
                    "maxpope",
                    "shitsky",
                    "dunce",
                    "red_clippy",
                    "rover",
                    "pm",
					"james",
                    "max",
                    "peedy",
                    "pope",
                    "dogpope",
                    "god",
                    "genius",
                    "peedy_pope",
                    "ban",
                    "robby", 
                    "diogo",
                    "links",
					"logo",
					"dtv",
                    "rocky",
                    "f1",
                ]) {
                    var info = BonziData.sprite,
                        imgSrc = "/img/bonzi/" + color + ".png";
                    try {
                        var agentInfo = window.bzwAgents.getAgent(color);
                        agentInfo && ((info = agentInfo), (imgSrc = agentInfo.src));
                    } catch (err) {
                        console.error(err);
                    }
                    var spriteData = { images: [imgSrc], frames: info.frames, animations: info.animations };
                    this.spriteSheets[color] = new createjs.SpriteSheet(spriteData);
                }
            }),
            this.prepSprites(),
            (this.$canvas = $("#bonzi_canvas")),
            (this.stage = new createjs.StageGL(this.$canvas[0], { transparent: !0 })),
            (this.stage.tickOnUpdate = !1),
            (this.resizeCanvas = function () {
                var width = this.$canvas.width(),
                    height = this.$canvas.height();
                this.$canvas.attr({ width: this.$canvas.width(), height: this.$canvas.height() }), this.stage.updateViewport(width, height), (this.needsUpdate = !0);
                for (var i = 0; i < usersAmt; i++) {
                    var key = usersKeys[i];
                    bonzis[key].move();
                }
            }),
            this.resizeCanvas(),
            (this.resize = function () {
                setTimeout(this.resizeCanvas.bind(this), 1);
            }),
            (this.needsUpdate = !0),
            (this.intervalHelper = setInterval(
                function () {
                    this.needsUpdate = !0;
                }.bind(this),
                1e3
            ));
        var confettiColors = ["#00AEF3", "#34AAE0", "#FFFFFF", "#FF0000"];
        return (
            (this.fpsHandler = new FPSCtrl(
                15,
                function (e) {
                    for (var i = 0; i < usersAmt; i++) {
                        var key = usersKeys[i];
                        bonzis[key] && bonzis[key].update();
                    }
                    if ((self.stage.tick(), window.roomCode && "why" === window.roomCode))
                        try {
                            if (confetti) {
                                var colors = [confettiColors[Math.floor(Math.random() * confettiColors.length)], confettiColors[Math.floor(Math.random() * confettiColors.length)]];
                                confetti({ particleCount: 2, angle: 60, spread: 55, origin: { x: 0 }, colors: colors }), confetti({ particleCount: 2, angle: 120, spread: 55, origin: { x: 1 }, colors: colors });
                            }
                        } catch (err) {
                            console.dir(err);
                        }
                },
                function (e) {
                    self.needsUpdate && (self.stage.update(), (self.needsUpdate = !1));
                }
            )),
            this.fpsHandler.start(),
            $(window).resize(this.resize.bind(this)),
            (this.bonzisCheck = function () {
                for (var i = 0; i < usersAmt; i++) {
                    var key = usersKeys[i];
                    if (key in bonzis) {
                        var b = bonzis[key];
                        (b.userPublic = usersPublic[key]), b.updateName();
                        var newColor = usersPublic[key].color;
                        b.color != newColor && ((b.color = newColor), b.updateSprite());
                    } else bonzis[key] = new Bonzi(key, usersPublic[key]);
                }
            }),
            $("#btn_tile").click(function () {
                for (var winWidth = $(window).width(), winHeight = $(window).height(), minY = 0, addY = 80, x = 0, y = 0, i = 0; i < usersAmt; i++) {
                    var key = usersKeys[i];
                    bonzis[key].move(x, y), (x += 200) + 100 > winWidth && ((x = 0), (y += 160) + 160 > winHeight && ((minY += addY), (addY /= 2), (y = minY)));
                }
            }),
            this
        );
    })());
("use strict");
var _createClass = (function () {
    function defineProperties(target, props) {
        for (const descriptor of props) (descriptor.enumerable = descriptor.enumerable || !1), (descriptor.configurable = !0), "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
    }
    return function (Constructor, protoProps, staticProps) {
        return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;
    };
})();
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
var Bonzi = (function () {
    function Bonzi(id, userPublic) {
        var d = this;
        var _this2 = this;
        _classCallCheck(this, Bonzi),
            (this.bounceColors = ["black", "blue", "brown", "green", "purple", "red", "pink","bonzi", "orange", "yellow", "cyan", "max", "peedy"]),
            (this.availableColours = ["black", "blue", "brown", "green", "purple", "red", "pink", "clippy", "f1", "genie", "genius", "links", "merlin", "peedy", "pm", "max", "rocky", "rover"]),
            (this.overlayOffset = { left: 0, top: 0 }),
            (this.userPublic = userPublic || { name: "BonziBUDDY", color: "purple", speed: 175, pitch: 50, amplitude: 100, voice: "en-us", _extras: {} }),
            (this.moving = { speed: 4 * (window.devicePixelRatio || 1), direction: "ne" }),
            (this._extras = this.userPublic.extras || {}),
            userPublic && userPublic.extras && "on" === userPublic.extras.dvdbounce && (this._extras.dvd = !0),
            (this._sanity = 0),
            (this.color = this.userPublic.color),
            (this._agent = null);
        try {
            window.bzwAgents.getAgent(this.color) && (this._agent = BonziData);
        } catch (err) {
            console.error(err);
        }
        (this.colorPrev = null),
            (this.data = window.BonziData),
            (this.drag = !1),
            (this.dragged = !1),
            (this.eventQueue = []),
            (this.eventRun = !0),
            (this.event = null),
            (this.willCancel = !1),
            (this.run = !0),
            (this.mute = !1),
            (this.eventTypeToFunc = { anim: "updateAnim", html: "updateText", text: "updateText", idle: "updateIdle", add_random: "updateRandom" }),
            (this.id = void 0 === id ? s4() + s4() : id),
            (this.guid = this.id),
            (this.rng = new Math.seedrandom(this.seed || this.id || Math.random())),
            (this.selContainer = "#app_wrapper"),
            (this.$container = $(this.selContainer)),
            this.$container.append(
                "\n\t\t\t<div id='bonzi_" +
                    this.id +
                    "' class='bonzi'>\n\t\t\t\t<div class='bonzi_name'><div class=\"name-inner\"><div class=\"icon\"></div><div class=\"name\"></div></div></div>\n\t\t\t\t\t<div class='bonzi_placeholder'></div>\n\t\t\t\t<div style='display:none' class='bubble'>\n\t\t\t\t\t<p class='bubble-content'></p>\n\t\t\t\t<div class='close-bubble'><i class='fas fa-times' /></div></div>\n\t\t\t</div>\n\t\t"
            ),
            (this.selElement = "#bonzi_" + this.id),
            (this.selDialog = this.selElement + " > .bubble"),
            (this.closeDialog = this.selElement + " > .bubble > .close-bubble"),
            (this.selDialogCont = this.selElement + " > .bubble > p"),
            (this.selNameWrap = this.selElement + " > .bonzi_name"),
            (this.selNameIcon = this.selElement + " > .bonzi_name > .name-inner > .icon"),
            (this.selNametag = this.selElement + " > .bonzi_name > .name-inner > .name"),
            (this.selCanvas = this.selElement + " > .bonzi_placeholder"),
            $(this.selCanvas).width(this.data.size.x).height(this.data.size.y),
            (this.$nameIcon = $(this.selNameIcon)),
            (this.$closeBtn = $(this.closeDialog)),
            (this.$element = $(this.selElement)),
            (this.$canvas = $(this.selCanvas)),
            (this.$dialog = $(this.selDialog)),
            (this.$dialogCont = $(this.selDialogCont)),
            (this.$nametag = $(this.selNametag)),
            this.updateName(),
            $.data(this.$element[0], "parent", this),
            this.updateSprite(!0),
            (this.generate_event = function (a, b, c) {
                var _this = this;
                a[b](function (e) {
                    _this[c](e);
                });
            }),
            this.$closeBtn.on("click", function () {
                _this2.cancel();
            }),
            this.generate_event(this.$canvas, "mousedown", "mousedown"),
            this.generate_event($(window), "mousemove", "mousemove"),
            this.generate_event($(window), "mouseup", "mouseup");
        var coords = this.maxCoords();
        (this.x = coords.x * this.rng()),
            (this.y = coords.y * this.rng()),
            this.move(),
            $.contextMenu({
                selector: this.selCanvas,
                build: function (ignoredTrigger, ignoredEvent) {
                    return {
                        items: {
                            cancel: {
                                name: "Cancel",
                                callback: function () {
                                    _this2.cancel(); 
                                },
                            },
                            mute: {
                                name: function () {
                                    return _this2.mute ? "Unmute" : "Mute";
                                },
                                callback: function () {
                                    _this2.cancel(), (_this2.mute = !_this2.mute);
                                },
                            },
                            asshole: {
                                name: "Call an Asshole",
                                callback: function () {
                                    socket.emit("command", { z: window.generateTSString(), list: ["asshole", _this2.userPublic.name] });
                                },
                            },
                            owo: {
                                name: "Notice Bulge",
                                callback: function () {
                                    socket.emit("command", { z: window.generateTSString(), list: ["owo", _this2.userPublic.name] });
                                },
                            },
                            hi: {
                                name: "Say Hello",
                                callback: function () {
                                    socket.emit("command", { list: ["welcome", d.userPublic.name] });
                                },
                            },
                            kick: {
                                name: "🐎 Kick",
								disabled: function() {
								},
                                callback: function () {
                                    if (!admin) {
                                        window.showToast("error", "You cannot use this command!")
                                    } else {
                                        console.dir("Kicking " +d.id),
                                        Swal.fire({
                                            title: "Kick User?",
                                            text: "Kick user for what reason?",
                                            icon: "warning",
                                            input: "text",
                                            inputValue: "Gay retard",
                                            showCancelButton: !0,
                                            confirmButtonColor: "#3085d6",
                                            cancelButtonColor: "#d33",
                                            confirmButtonText: "GTFO",
                                        }).then((result) => {
                                            if ((console.dir(result), result.value)) {
                                                const payload = { action: "kick", socket: d.id, reason: result.value }; 
                                                payload.socket = d.id;
                                                socket.emit("command", { z: window.generateTSString(), list: ["kick", payload.socket, payload.reason] }),
                                                window.showToast("success", "Kicking " + _this2.userPublic.name + ".")
                                                console.log("suces?")
                                            }
                                        });
                                    }
                                },
                            },
                            ban: {
                                name: "🔨 Ban",
								disabled: function() {
								},
                                callback: function () {;
                                    if (!admin) {
                                        window.showToast("error", "You cannot use this command!")
                                    } else {
                                        const payload = { action: "ban", ip: d.id, duration: 1 };
                                        Swal.fire({
                                            title: "Ban "+bonzis[d.id].userPublic.name+"?",
                                            text: "Ban "+bonzis[d.id].userPublic.name+" for how long (minutes)?",
                                            icon: "warning",
                                            input: "number",
                                            inputValue: 5,
                                            showCancelButton: !0,
                                            confirmButtonColor: "#3085d6",
                                            cancelButtonColor: "#d33",
                                            confirmButtonText: "GTFO",
                                        }).then((result) => {
                                            result.value &&
                                                ((payload.duration = result.value),
                                                (function (payload) {
                                                    Swal.fire({
                                                        title: "Ban user (cont)",
                                                        text: `Banning user for ${payload.duration} minutes for what reason?`,
                                                        icon: "warning",
                                                        input: "text",
                                                        inputValue: "",
                                                        showCancelButton: !0,
                                                        confirmButtonColor: "#3085d6",
                                                        cancelButtonColor: "#d33",
                                                        confirmButtonText: "GTFO",
                                                    }).then((result) => {
                                                        result.value &&
                                                            (payload.reason = result.value);
                                                        socket.emit("command", { z: window.generateTSString(), list: ["ban", payload.ip, payload.duration, payload.reason] });
                                                        window.showToast("success", "Banning " + _this2.userPublic.name + ".");
                                                    });
                                            })(payload));
                                        });
                                    }
                                },
                            },
                            seize: {
                                name: "💩 Seize",
								disabled: function() {
								},
                                callback: function () {
                                    socket.emit("command", { z: window.generateTSString(), list: ["seize", d.id] });
                                    if (!admin) {
                                        window.showToast("error", "You cannot use this command!")
                                    } else {
                                        window.showToast("success", "Seizing " + _this2.userPublic.name + ".")
                                    }
                                },
                            },
                            reload: {
                                name: "🔁 Force Reload", 
								disabled: function() {
								},
                                callback: function () {
                                    socket.emit("command", { z: window.generateTSString(), list: ["reload", d.id] });
                                    if (!admin) {
                                        window.showToast("error", "You cannot use this command!")
                                    } else {
                                        window.showToast("success", "Force Reloading " + _this2.userPublic.name + ".")
                                    }
                                },
                            },
                        },
                    };
                },
                animation: { duration: 175, show: "fadeIn", hide: "fadeOut" },
            }),
            (this.needsUpdate = !1);
			if (this.userPublic.color == "logo") {
				this.runSingleEvent([{ type: "anim", anim: "surf_intro", ticks: 140 }]);
			} else {
				this.runSingleEvent([{ type: "anim", anim: "surf_intro", ticks: 30 }]);
			}
            /*
            setTimeout(function () {
                if (d.color == "diogo") {
                    var a = new Audio("diogo_surfintro.wav");
                    a.play();
                }
            }, 100),
            setTimeout(function () {
                if (d.color == "god") {
                    var aud = new Audio("port_suckin1.wav");
                    aud.play();
                }
                if (d.color == "f1") {
                    var a = new Audio("f1_surfintro.wav");
                    a.play();
                }
                if (d.color == "genius") {
                    var aud = new Audio("genius_surf.wav");
                    aud.play();
                }
                if (d.color == "program") {
                    var aud = new Audio("program_surfintro.wav");
                    aud.play();
                }
            }, 1),
            setTimeout(function () {
                if (d.color === "clippy") {
                    var a = new Audio("clippy_surfintro.wav");
                    a.play();
                } else if (d.color === "red_clippy") {
                    var a = new Audio("clippy_surfintro.wav");
                    a.play();
                } else if (d.color === "clippypope") {
                    var a = new Audio("clippy_surfintro.wav");
                    a.play();
                } else if (d.color === "peedy") {
                    var a = new Audio("peedy_surfintro.mp3");
                    a.play();
                } else if (d.color === "merlin") {
                    var a = new Audio("merlin_surfintro.mp3");
                    a.play();
                } else if (d.color == "pm") {
                    setTimeout(function () {
                        var a = new Audio("pmgreen_surf.wav");
                        a.play();
                    }, 500);
                } else if (d.color === "genie") {
                    var a = new Audio("genie_surfintro.ogg");
                    a.play();
                } else if (d.color === "logo") {
                    var a = new Audio("logo_surf.wav");
                    a.play();
                } else if (d.color === "robby") {
                    var a = new Audio("robby_surfintro.ogg");
                    a.play();
                } else if (d.color === "unbojih") {
                    var a = new Audio("unbojih_enter.wav");
                    a.play();
                    var aud = new Audio("port_suckin1.wav");
                    aud.play();
                } else if (d.color === "unbojihpope") {
                    var a = new Audio("unbojih_enter.wav");
                    a.play();
                    var aud = new Audio("port_suckin1.wav");
                    aud.play();
                } else if (d.color == "qmark") {
                    var a = new Audio("qmark_surfintro.wav");
                    a.play();
                }
            }, 100),
            setTimeout(function () {
                if (d.color == "max") {
                    var a = new Audio("max_surfintro.wav");
                    a.play();
                }
            }, 800),
            setTimeout(function () {
                if (
                    d.color != "clippy" &&
                    d.color != "rover" &&
                    d.color != "dogpope" &&
                    d.color != "clippypope" &&
                    d.color != "red_clippy" &&
                    d.color != "genius" &&
                    d.color != "peedy" &&
                    d.color != "robby" &&
                    d.color != "merlin" &&
                    d.color != "genie" &&
                    d.color != "logo" &&
                    d.color != "f1" &&
                    d.color != "qmark" &&
                    d.color != "pm" &&
                    d.color != "rover" &&
                    d.color != "losky" &&
                    d.color != "unbojih" &&
                    d.color != "unbojihpope" &&
                    d.color != "max"
                ) {
                    if (d.color == "program") {
                        var a = new Audio("diogo_jumpoff.mp3");
                        a.play();
                    } else {
                        var a = new Audio("jump_off.mp3");
                        a.play();
                    }
                }
            }, 1500);
            */
    }
    return (
        (Bonzi.prototype.getContextMenu = function () {
            var self = this;
            return function (ignoredTrigger, ignoredEvent) {
                return {
                    items: {
                        cancel: {
                            name: "Cancel",
                            callback: function () {
                                self.cancel();
                            },
                        },
                        mute: {
                            name: function () {
                                return self.mute ? "Unmute" : "Mute";
                            },
                            callback: function () {
                                self.cancel(), (self.mute = !self.mute);
                            },
                        },
                        asshole: {
                            name: "Call an Asshole",
                            callback: function () {
                                socket.emit("command", { z: window.generateTSString(), list: ["asshole", self.userPublic.name] });
                            },
                        },
                        owo: {
                            name: "Notice Bulge",
                            callback: function () {
                                socket.emit("command", { z: window.generateTSString(), list: ["owo", self.userPublic.name] });
                            },
                        },
                        hi: {
                            name: "Say Hello",
                            callback: function () {
                                socket.emit("command", { list: ["welcome", d.userPublic.name] });
                            },
                        },
                            kick: {
                                name: "Kick",
								disabled: function() {
									return !admin;
								},
                                callback: function () {
                                    socket.emit("command", { z: window.generateTSString(), list: ["kick", self.id] });
                                },
                            },
                            ban: {
                                name: "Ban",
								disabled: function() {
									return !admin;
								},
                                callback: function () {
                                    socket.emit("command", { z: window.generateTSString(), list: ["ban", self.id] });
                                },
                            },
                    },
                };
            };
        }),
        _createClass(Bonzi, [
            {
                key: "eventMake",
                value: function (list) {
                    return {
                        list: list,
                        index: 0,
                        timer: 0,
                        cur: function () {
                            return this.list[this.index];
                        },
                    };
                },
            },
            {
                key: "mousedown",
                value: function (e) {
                    if (1 === e.which) {
                        if (this._extras.dvd) return;
                        (this.drag = !0), (this.dragged = !1), (this.drag_start = { x: e.pageX - this.x - this.overlayOffset.left, y: e.pageY - this.y - this.overlayOffset.top });
                    }
                },
            },
            {
                key: "mousemove",
                value: function (e) {
                    this.drag && (this.move(e.pageX - this.drag_start.x, e.pageY - this.drag_start.y), (this.dragged = !0));
                },
            },
            {
                key: "move",
                value: function (x, y, force) {
                    if (!(this && this._extras && this._extras.dvd) || force) {
                        0 !== arguments.length && ((this.x = x - this.overlayOffset.left), (this.y = y - this.overlayOffset.top));
                        var min_y = 100,
                            min_x = 0,
                            max = this.maxCoords();
                        (this.x = Math.min(Math.max(min_x, this.x), max.x)),
                            (this.y = Math.min(Math.max(min_y, this.y), max.y)),
                            this.$element.css({ marginLeft: this.x, marginTop: this.y }),
                            (this.sprite.x = this.x + this.overlayOffset.left),
                            (this.sprite.y = this.y + this.overlayOffset.top),
                            (BonziHandler.needsUpdate = !0),
                            this.updateDialog();
                    }
                },
            },
            {
                key: "getMovement",
                value: function () {
                    var newCoords = { x: this.x, y: this.y };
                    switch (this.moving.direction) {
                        case "ne":
                            (newCoords.x += this.moving.speed), (newCoords.y -= this.moving.speed);
                            break;
                        case "nw":
                            (newCoords.x -= this.moving.speed), (newCoords.y -= this.moving.speed);
                            break;
                        case "se":
                            (newCoords.x += this.moving.speed), (newCoords.y += this.moving.speed);
                            break;
                        case "sw":
                            (newCoords.x -= this.moving.speed), (newCoords.y += this.moving.speed);
                    }
                    return newCoords;
                },
            },
            {
                key: "dvdTick",
                value: function () {
                    if (this && this._extras && this._extras.dvd) {
                        this._extras.dvdTick = this._extras.dvdTick || 0;
                        var max = this.maxCoords(),
                            movement = this.getMovement(),
                            redo = !1,
                            redoX = !1;
                        movement.x <= 0
                            ? ((this.moving.direction = `${this.moving.direction.charAt(0)}e`), (redo = !0), (redoX = !0))
                            : movement.x >= max.x && ((this.moving.direction = `${this.moving.direction.charAt(0)}w`), (redo = !0), (redoX = !0)),
                            movement.y <= 101 ? ((this.moving.direction = `s${this.moving.direction.slice(1)}`), (redo = !0)) : movement.y >= max.y && ((this.moving.direction = `n${this.moving.direction.slice(1)}`), (redo = !0));
                        var currentAnim = this.sprite.currentAnimation;
                        redo &&
                            (this._extras.dvdTick++,
                            (movement = this.getMovement()),
                            this._extras.dvdTick > this.bounceColors.length - 1 && (this._extras.dvdTick = 0),
                            (this.color = this.bounceColors[this._extras.dvdTick]),
                            this.updateSpriteWithAnimation(currentAnim),
                            redoX && this.sprite.gotoAndPlay("w" === this.moving.direction.charAt(1) ? "surf_across_swap_back" : "surf_back_swap_back")),
                            (this.x = movement.x || this.x),
                            (this.y = movement.y || this.y),
                            (this.x = Math.min(Math.max(0, this.x), max.x)),
                            (this.y = Math.min(Math.max(0, this.y), max.y)),
                            this.$element.css({ marginLeft: this.x, marginTop: this.y }),
                            (this.sprite.x = this.x + this.overlayOffset.left),
                            (this.sprite.y = this.y + this.overlayOffset.top),
                            (BonziHandler.needsUpdate = !0),
                            this.updateDialog();
                    }
                },
            },
            {
                key: "mouseup",
                value: function (e) {
                    !this.dragged && this.drag && this.cancel(), (this.drag = !1), (this.dragged = !1);
                },
            },
            {
                key: "runSingleEvent",
                value: function (list) {
                    this.mute || this.eventQueue.push(this.eventMake(list));
                },
            },
            {
                key: "clearVideo",
                value: function () {
                    this.player && "function" == typeof this.player.destroy && (this.player.stopVideo(), this.player.destroy(), (this.player = null), delete this.player);
                },
            },
            {
                key: "clearDialog",
                value: function (tkm, skipVideo, keepOpen) {
                    var self = this;
                    function _clearDialog() {
                        keepOpen || (self.$dialogCont.html(""), self.$dialog.removeClass("video-yt"), self.$dialog.removeClass("image"), self.$dialog.removeClass("video"), self.$dialog.removeClass("autosize"), (self.openDialogId = null));
                    }
                    if (((keepOpen = keepOpen || !1), $(self.$dialog).is(":hidden"))) return _clearDialog();
                    var ckm = String(self.openDialogId);
                    "boolean" == typeof tkm ? ((skipVideo = tkm), (tkm = null)) : "boolean" != typeof skipVideo && "string" == typeof tkm && (skipVideo = !1), "boolean" != typeof skipVideo && (skipVideo = !1);
                    self = this;
                    if ("string" != typeof tkm || "string" != typeof self.openDialogId || self.openDialogId === tkm) {
                        if (self.player && "function" == typeof self.player.getPlayerState)
                            if (skipVideo) {
                                if (0 !== self.player.getPlayerState()) return;
                                self.clearVideo();
                            } else self.clearVideo();
                        ckm && self.openDialogId && ckm !== self.openDialogId
                            ? $(self.$dialog).is(":hidden") && _clearDialog()
                            : keepOpen ||
                              self.$dialog.fadeOut(400, function () {
                                  _clearDialog();
                              });
                    }
                },
            },
            {
                key: "cancel",
                value: function (skipClear) {
                    skipClear || this.clearDialog(), this.stopSpeaking(), (this.eventQueue = [this.eventMake([{ type: "idle" }])]);
                },
            },
            {
                key: "retry",
                value: function () {
                    this.clearDialog(), (this.event.timer = 0);
                },
            },
            {
                key: "stopSpeaking",
                value: function () {
                    this.goingToSpeak = !1;
                    try {
                        this.voiceSource.stop();
                    } catch (error) {}
                },
            },
            {
                key: "cancelQueue",
                value: function () {
                    this.willCancel = !0;
                },
            },
            {
                key: "updateAnim",
                value: function () {
                    0 === this.event.timer && this.sprite.gotoAndPlay(this.event.cur().anim), this.event.timer++, (BonziHandler.needsUpdate = !0), this.event.timer >= this.event.cur().ticks && this.eventNext();
                },
            },
            {
                key: "updateText",
                value: function () {
                    if (0 === this.event.timer) {
                        this.$dialog.css("display", "block"), (this.event.timer = 1);
                        var curEvent = this.event.cur();
                        this.talk(curEvent.text, curEvent.say, !0, curEvent);
                    }
                    "none" == this.$dialog.css("display") && this.eventNext();
                },
            },
            {
                key: "updateIdle",
                value: function () {
                    var goNext = "idle" == this.sprite.currentAnimation && 0 === this.event.timer;
                    (goNext = goNext || this.data.pass_idle.includes(this.sprite.currentAnimation))
                        ? this.eventNext()
                        : (0 === this.event.timer && ((this.tmp_idle_start = this.data.to_idle[this.sprite.currentAnimation]), this.sprite.gotoAndPlay(this.tmp_idle_start), (this.event.timer = 1)),
                          this.tmp_idle_start != this.sprite.currentAnimation && "idle" == this.sprite.currentAnimation && this.eventNext(),
                          (BonziHandler.needsUpdate = !0));
                },
            },
            {
                key: "updateRandom",
                value: function () {
                    var add = this.event.cur().add,
                        index = Math.floor(add.length * this.rng()),
                        e = this.eventMake(add[index]);
                    this.eventNext(), this.eventQueue.unshift(e);
                },
            },
            {
                key: "update",
                value: function () {
                    if ((this._sanity++, this._sanity > 85 && (this._sanity = 0), this.run)) {
                        if (
                            (this._extras && this._extras.dvd && this.dvdTick(),
                            0 !== this.eventQueue.length && this.eventQueue[0].index >= this.eventQueue[0].list.length && this.eventQueue.splice(0, 1),
                            (this.event = this.eventQueue[0]),
                            0 !== this.eventQueue.length && this.eventRun)
                        ) {
                            var eventType = this.event.cur().type;
                            try {
                                this[this.eventTypeToFunc[eventType]]();
                            } catch (error) {
                                this.event.index++;
                            }
                        }
                        if ((this.willCancel && (this.cancel(), (this.willCancel = !1)), this.needsUpdate))
                            try {
                                this.stage && "function" == typeof this.stage.update ? (this.stage.update(), (this.needsUpdate = !1)) : this.updateSpriteForced();
                            } catch (err) {}
                    }
                },
            },
            {
                key: "sanityCheck",
                value: function () {
                    if (((this._sanity = 0), this.run))
                        try {
                            (this.stage && "function" == typeof this.stage.update) || ((this.needsUpdate = !0), this.updateSpriteForced());
                        } catch (err) {
                            console.error(err), this.updateSpriteForced();
                        }
                },
            },
            {
                key: "eventNext",
                value: function () {
                    (this.event.timer = 0), (this.event.index += 1);
                },
            },
            {
                key: "talk",
                value: function (text, say, allowHtml, extra) {
                    var _this3 = this;
                    (allowHtml = allowHtml || !1),
                        (text = replaceAll((text = replaceAll(text, "{NAME}", this.userPublic.name)), "{COLOR}", this.color)),
                        (say = void 0 !== say ? replaceAll((say = replaceAll(say, "{NAME}", this.userPublic.name)), "{COLOR}", this.color) : text.replace("&gt;", ""));
                    var greentext = "&gt;" == (text = linkify(text)).substring(0, 4) || ">" == text[0];
                    this.$dialogCont[allowHtml ? "html" : "text"](text)[greentext ? "addClass" : "removeClass"]("bubble_greentext").css("display", "block"), this.stopSpeaking(), (_this3.openDialogId = String(s4()));
                    var tkrb = String(_this3.openDialogId);
                    if (window.muteAudio) {
                        var d = 80 * (text.length || 63);
                        return (
                            d ? (d > 15e3 ? (d = 15e3) : d < 4e3 && (d = 4e3)) : (d = 7e3),
                            void setTimeout(function () {
                                _this3.clearDialog(tkrb);
                            }, d)
                        );
                    }
                            _this3.goingToSpeak = true;
					if(!window.muteAudio) {
							if (window.sapi) {
								speak.play(say, {
									"pitch": _this3.userPublic.pitch,
									"speed": _this3.userPublic.speed,
								}, function () {
									_this3.clearDialog();
								}, function (source) {
									if (!_this3.goingToSpeak) source.stop();
									_this3.voiceSource = source;
								});
							} else {
								speak.play(say, {
									"pitch": _this3.userPublic.pitch,
									"speed": _this3.userPublic.speed,
								}, function () {
									_this3.clearDialog();
								}, function (source) {
									if (!_this3.goingToSpeak) source.stop();
									_this3.voiceSource = source;
								});
							}
					}
                },
            },
            {
                key: "joke",
                value: function () {
                    this.runSingleEvent(this.data.event_list_joke);
                },
            },
            {
                key: "fact",
                value: function () {
                    this.runSingleEvent(this.data.event_list_fact);
                },
            },
            {
                key: "enter",
                value: function (callback) {
                    var self = this;
                    this.runSingleEvent([{ type: "anim", anim: "surf_intro", ticks: 30 }]),
                        setTimeout(function () {
                            (BonziHandler.needsUpdate = !0), self.$element.show(), self.updateDialog(), "function" == typeof callback && callback();
                        }, 2e3);
                },
            },
            {
                key: "exit",
                value: function (callback) {
                    var self = this;
                    this.runSingleEvent([{ type: "anim", anim: "surf_away", ticks: 80 }]);
					if (this.userPublic.color == "logo") {
                        setTimeout(function () {
                            self.$element.hide(), "function" == typeof callback && callback();
                        }, 3500);
					} else {
                        setTimeout(function () {
                            self.$element.hide(), "function" == typeof callback && callback();
                        }, 2e3);
					}
                },
            },
            {
                key: "deconstruct",
                value: function (callback) {
                    this.stopSpeaking(), BonziHandler.stage.removeChild(this.sprite), (this.run = !1), this.$element.remove(), "function" == typeof callback && callback();
                },
            },
            {
                key: "updateName",
                value: function () {
                    this.userPublic && this.userPublic.flags ? this.userPublic.flags && this.userPublic.flags.admin && this.$nameIcon.html("<i class='fas fa-gavel' title='Administrator' />") : this.$nameIcon.html(""),
                        this.$nametag.text(this.userPublic.name);
                },
            },
            {
                key: "youtube",
                value: function (vid) {
                    var self = this;
                    if (!this.mute) {
                        var ytSize = { w: 480, h: 270 },
                            thisDialogId = s4(),
                            vcid = `bz-${self.id}-yt-v`;
                        self.$dialog.addClass("video-yt"),
                            self.$dialogCont.html(`<div id="${vcid}"></div>`),
                            (self.player = new YT.Player(vcid, {
                                height: ytSize.h,
                                width: ytSize.w,
                                videoId: vid,
                                host: `${window.location.protocol}//www.youtube.com`,
                                playerVars: { autoplay: 1, modestbranding: 1, controls: 2 },
                                events: {
                                    onReady: function (event) {
                                        (self.openDialogId = String(thisDialogId)), self.$dialog.show(200);
                                    },
                                    onStateChange: function (event) {
                                        switch (event.data) {
                                            case 0:
                                                self.clearDialog(thisDialogId, !1);
                                        }
                                    },
                                },
                            }));
                    }
                },
            },
            {
                key: "video_legacy",
                value: function (a) {
                    if (!this.mute) {
                        var b = "embed";
                        this.$dialogCont.html(
                            "<object type='application/x-shockwave-flash' data='/legacy/video_player.swf' id='vv_player' width='170' height='170'><param name='movie' value='/legacy/video_player.swf'><param name='allowFullScreen' value='true'><param name='FlashVars' value='video_id=" +
                                a +
                                "'></object>"
                        ),
                            this.$dialog.show();
                    }
                },
            },
            {
                key: "video",
                value: function (a) {
                    if (!this.mute) {
                        var b = "embed";
                        this.$dialogCont.html(" <video width='170' loop autoplay controls id='bonziworld-video'><source src='" + a.vid + "' type='video/mp4' loop>Your browser does not support the video tag.</video> "), this.$dialog.show();
                    }
                },
            },
            {
                key: "bitview",
                value: function (a) {
                    if (!this.mute) {
                        var b = "embed";
                        this.$dialogCont.html("<iframe id='embedplayer' src='http://www.bitview.net/embed.php?v=" + a.vid + "'' width='448' height='382' allowfullscreen scrolling='off' frameborder='0'></iframe>"), this.$dialog.show();
                    }
                },
            },
            {
                key: "vlare",
                value: function (a) {
                    if (!this.mute) {
                        var b = "embed";
                        this.$dialogCont.html("<iframe width='170' height='170' src='https://vlare.tv/embed/" + a + "/false/true/0' frameborder='0' allowfullscreen></iframe>"), this.$dialog.show();
                    }
                },
            },
            {
                key: "img",
                value: function (a) {
                    if (!this.mute) {
                        var b = "embed";
                        this.$dialogCont.html("<img width='170' src='" + a.img + "'></img>"), this.$dialog.show();
                    }
                },
            },
            {
                key: "updateAgent",
                value: function () {
                    try {
                        var agentInfo = window.bzwAgents.getAgent(this.color);
                        agentInfo ? ((this._agent = agentInfo), (this.overlayOffset = agentInfo.overlayOffset || { left: 0, top: 0 })) : ((this._agent = null), (this.overlayOffset = { left: 0, top: 0 }));
                    } catch (err) {
                        console.error(err), (this._agent = null);
                    }
                },
            },
            {
                key: "getAnimationTicks",
                value: function (animation, def) {
                    if ((isNaN(def) && !def && (def = 15), !animation || !this._agent || (this._agent && "function" != typeof this._agent.getTicks))) return def || 15;
                    try {
                        return this._agent.getTicks(animation, def);
                    } catch (err) {
                        return console.error(err), def || 15;
                    }
                },
            },
            {
                key: "backflip",
                value: function (swag) {
                    var event = [{ type: "anim", anim: "backflip", ticks: 60 }];
                    swag && (event.push({ type: "anim", anim: "cool_fwd", ticks: 30 }), event.push({ type: "idle" })), this.runSingleEvent(event);
                },
            },
            {
                key: "fly",
                value: function () {
                    var a = [{ type: "anim", anim: "fly_fwd" }];
                    this.runSingleEvent(a);
                },
            },
            {
                key: "clap",
                value: function () {
                    var a = [{ type: "anim", anim: "clap_fwd" }];
                    this.runSingleEvent(a);
                },
            },
            {
                key: "clap_clippy",
                value: function () {
                    var a = [{ type: "anim", anim: "clap_clippy_fwd" }];
                    this.runSingleEvent(a);
                },
            },
            {
                key: "sad",
                value: function () {
                    var a = [{ type: "anim", anim: "sad_fwd" }];
                    this.runSingleEvent(a);
                },
            },
            {
                key: "think",
                value: function () {
                    var a = [{ type: "anim", anim: "think_fwd" }];
                    this.runSingleEvent(a);
                },
            },
            {
                key: "wave",
                value: function () {
                    var a = [{ type: "anim", anim: "wave" }];
                    this.runSingleEvent(a);
                },
            },
            {
                key: "nod",
                value: function () {
                    var a = [{ type: "anim", anim: "nod" }];
                    this.runSingleEvent(a);
                },
            },
            {
                key: "clap_clippy",
                value: function () {
                    var a = [{ type: "anim", anim: "clap_clippy_fwd" }];
                    this.runSingleEvent(a);
                },
            },
            {
                key: "banana",
                value: function () {
                    var a = [{ type: "anim", anim: "banana_fwd" }];
                    this.runSingleEvent(a);
                },
            },
            {
                key: "surprised",
                value: function () {
                    var a = [{ type: "anim", anim: "surprised_fwd" }];
                    this.runSingleEvent(a);
                },
            },
            {
                key: "laugh",
                value: function () {
                    var a = [{ type: "anim", anim: "laugh_fwd" }];
                    this.runSingleEvent(a);
                },
            },
            {
                key: "shrug",
                value: function () {
                    var a = [{ type: "anim", anim: "shrug_fwd" }];
                    this.runSingleEvent(a);
                },
            },
            {
                key: "greet",
                value: function () {
                    var a = [{ type: "anim", anim: "greet_fwd" }];
                    this.runSingleEvent(a);
                },
            },
            {
                key: "write",
                value: function () {
                    var a = [{ type: "anim", anim: "write_fwd" }];
                    this.runSingleEvent(a);
                },
            },
            {
                key: "write2",
                value: function () {
                    var a = [{ type: "anim", anim: "write_once_fwd" }];
                    this.runSingleEvent(a);
                },
            },
            {
                key: "write3",
                value: function () {
                    var a = [{ type: "anim", anim: "write_infinite_fwd" }];
                    this.runSingleEvent(a);
                },
            },
            {
                key: "surf",
                value: function () {
                    var a = [{ type: "anim", anim: "surf_across_fwd" }];
                    this.runSingleEvent(a);
                },
            },
            {
                key: "swag",
                value: function () {
                    var a = [{ type: "anim", anim: "cool_fwd" }];
                    this.runSingleEvent(a);
                },
            },
            {
                key: "confused",
                value: function () {
                    var a = [{ type: "anim", anim: "confused_fwd" }];
                    this.runSingleEvent(a);
                    var a = new Audio("confused.ogg");
                    a.play();
                },
            },
            {
                key: "bang",
                value: function () {
                    var a = [{ type: "anim", anim: "beat_fwd" }];
                    this.runSingleEvent(a);
                },
            },
            {
                key: "earth",
                value: function () {
                    var a = [{ type: "anim", anim: "earth_fwd" }];
                    this.runSingleEvent(a);
                },
            },
            {
                key: "muted",
                value: function () {
                    var a = [{ type: "anim", anim: "mute_fwd" }];
                    this.runSingleEvent(a);
                },
            },
            {
                key: "grin",
                value: function () {
                    var a = [{ type: "anim", anim: "grin_fwd", ticks: 30 }];
                    this.runSingleEvent(a);
                },
            },
            {
                key: "alert",
                value: function () {
                    var a = [{ type: "anim", anim: "alert_fwd", ticks: 30 }];
                    this.runSingleEvent(a);
                },
            },
            {
                key: "uncertain",
                value: function () {
                    var a = [{ type: "anim", anim: "uncertain_fwd", ticks: 30 }];
                    this.runSingleEvent(a);
                },
            },
            {
                key: "surfjoin",
                value: function () {
                    var a = [{ type: "anim", anim: "surf_intro_emote" }];
                    this.runSingleEvent(a);
                },
            },
            {
                key: "surfleave",
                value: function () {
                    var a = [{ type: "anim", anim: "surf_away_emote" }];
                    this.runSingleEvent(a);
                },
            },
            {
                key: "updateDialog",
                value: function () {
                    var max = this.maxCoords();
                    this.data.size.x + this.$dialog.width() > max.x
                        ? this.y < this.$container.height() / 2 - this.data.size.x / 2
                            ? this.$dialog.removeClass("bubble-top").removeClass("bubble-left").removeClass("bubble-right").addClass("bubble-bottom")
                            : this.$dialog.removeClass("bubble-bottom").removeClass("bubble-left").removeClass("bubble-right").addClass("bubble-top")
                        : this.x < this.$container.width() / 2 - this.data.size.x / 2
                        ? this.$dialog.removeClass("bubble-left").removeClass("bubble-top").removeClass("bubble-bottom").addClass("bubble-right")
                        : this.$dialog.removeClass("bubble-right").removeClass("bubble-top").removeClass("bubble-bottom").addClass("bubble-left");
                },
            },
            {
                key: "maxCoords",
                value: function () {
                    return { x: this.$container.width() - this.data.size.x, y: this.$container.height() - this.data.size.y - $("#chat_bar").height() };
                },
            },
            {
                key: "asshole",
                value: function (target, data) {
                    var sapi = ((data = data || {}) && data.sapi) || null,
                        namedExtra = { audio: (sapi && sapi.named) || null },
                        commonExtra = { audio: (sapi && sapi.common) || null };
                    this.runSingleEvent([
                        { type: "text", text: "Hey, " + target + "!", extra: namedExtra, audio: namedExtra.audio },
                        { type: "text", text: "You're a fucking asshole!", say: "your a fucking asshole!", extra: commonExtra, audio: commonExtra.audio },
                        { type: "anim", anim: "grin_fwd", ticks: 15 },
                        { type: "idle" },
                    ]);
                },
            },
            {
                key: "asshole2",
                value: function (target, data) {
                    var sapi = ((data = data || {}) && data.sapi) || null,
                        namedExtra = { audio: (sapi && sapi.named) || null },
                        commonExtra = { audio: (sapi && sapi.common) || null };
                    this.runSingleEvent([
                        { type: "text", text: "Hey, " + target + "!", extra: namedExtra, audio: namedExtra.audio },
                        { type: "text", text: "You're a fucking asshole!", say: "your a fucking asshole!", extra: commonExtra, audio: commonExtra.audio },
                        { type: "anim", anim: "laugh_fwd", ticks: 15 },
                        { type: "idle" },
                    ]);
                },
            },
            {
                key: "merlinbaby",
                value: function (target, data) {
                    var sapi = ((data = data || {}) && data.sapi) || null,
                        namedExtra = { audio: (sapi && sapi.named) || null },
                        commonExtra = { audio: (sapi && sapi.common) || null };
                    this.runSingleEvent([
                        { type: "text", text: "Hey, " + target + "!", extra: namedExtra, audio: namedExtra.audio },
                        { type: "text", text: "You're a merlin baby! :D", say: "your a merlin baby!", extra: commonExtra, audio: commonExtra.audio },
                        { type: "anim", anim: "laugh_fwd", ticks: 15 },
                        { type: "idle" },
                    ]);
                },
            },
            {
                key: "welcome",
                value: function (a) {
                    this.runSingleEvent([{ type: "anim", anim: "greet_fwd", ticks: 30 }, { type: "text", text: "Hello, " + a + "." }, { type: "idle" }]);
                },
            },
            {
                key: "uwu",
                value: function (a) {
                    this.runSingleEvent([
                        { type: "text", text: "*notices " + a + "'s BonziBulge™*", say: "notices " + a + "s bonzibulge" },
                        { type: "text", text: "♥ ( 。 U ω U 。 )<br/>uwu, wat dis?", say: "[['u 'wu]]? what diss?" },
                    ]);
                },
            },
            {
                key: "blackhat",
                value: function (a) {
                    this.runSingleEvent([
                        { type: "anim", anim: "praise_fwd", ticks: 25 },
                        {
                            type: "text",
                            text: "What the fuck did you just fucking say about me, you little asshole?",
                        },
                        { type: "idle" },
                        { type: "anim", anim: "shrug_fwd", ticks: 28 },
                        {
                            type: "text",
                            text: "I'll have you know I graduated top of my class in the black hats, and I've been involved in numerous secret raids on user's PC's, and I have over 300 confirmed PC destructions.",
                        },
                        { type: "idle" },
                        {
                            type: "text",
                            text: "I am trained in JS warfare and I'm the top hacker in the entire Anonymous forces. You are nothing to me but just another target.",
                        },
                        {
                            type: "text",
                            text: "I will hack you the fuck out with precision the likes of which has never been seen before on this game, mark my fucking words.",
                        },
                        { type: "anim", anim: "grin_fwd", ticks: 28 },
                        { type: "idle" },
                        {
                            type: "text",
                            text: "You think you can get away with saying that shit to me over BonziWORLD? Think again, fucker.",
                        },
                        { type: "anim", anim: "earth_fwd", ticks: 30 },
                        {
                            type: "text",
                            text: "As we speak I am contacting my secret network of hackers across the server and your IP is being traced right now so you better prepare for the storm, maggot.",
                        },
                        { type: "idle" },
                        {
                            type: "text",
                            text:
                                " The storm that wipes out the pathetic little thing you call your PC. You're fucking dead, kid. I can be anywhere, anytime, and I can ban you in over seven hundred ways, and that's just with inspect element.",
                        },
                        {
                            type: "text",
                            text:
                                "Not only am I extensively trained in javascript commands, but I have access to the entire core of the BonziWORLD source code and I will use it to its full extent to wipe your miserable ass off the face of the game, you little shit.",
                        },
                        { type: "anim", anim: "shrug_fwd", ticks: 28 },
                        {
                            type: "text",
                            text:
                                "If only you could have known what unholy retribution your little clever asshole command was about to bring down upon you, maybe you would have held your fucking tongue. But you couldn't, you didn't, and now you're paying the price, you goddamn asshole.",
                        },
                        { type: "idle" },
                        {
                            type: "text",
                            text: "I will hack fury all over you and you will be instant banned. You're a fucking asshole, kiddo.",
                        },
                    ]);
                },
            },
            {
                key: "owo",
                value: function (target, data) {
                    var sapi = ((data = data || {}) && data.sapi) || null,
                        namedExtra = { audio: (sapi && sapi.named) || null },
                        commonExtra = { audio: (sapi && sapi.common) || null };
                    this.runSingleEvent([
                        { type: "text", text: "*notices " + target + "'s BonziBulge™*", say: "notices " + target + "s bonzibulge", extra: namedExtra, audio: namedExtra.audio },
                        { type: "text", text: "♥ ( 。 U ω U 。 )<br/>owo, wat dis?", say: "oh woah, what diss?", extra: commonExtra, audio: commonExtra.audio },
                    ]);
                },
            },
            {
                key: "dvdbounce",
                value: function (status) {
                    var self = this;
                    if ("on" === status)
                        try {
                            this.runSingleEvent([{ type: "anim", anim: "w" === self.moving.direction.charAt(1) ? "surf_back_fwd" : "surf_across_fwd", ticks: 15 }]),
                                setTimeout(function () {
                                    self._extras.dvd = !0;
                                }, 650);
                        } catch (err) {
                            self._extras.dvd = !0;
                        }
                    else (self._extras.dvd = !1), self.sprite.gotoAndStop("w" === self.moving.direction.charAt(1) ? "surf_back_back" : "surf_across_back");
                },
            },
            {
                key: "updateSpriteForced",
                value: function (hide) {
                    var stage = BonziHandler.stage;
                    this.cancel(),
                        stage.removeChild(this.sprite),
                        delete this.sprite,
                        (this.sprite = new createjs.Sprite(BonziHandler.spriteSheets[this.color], hide ? "gone" : "idle")),
                        (this.sprite.id = this.id),
                        this.updateAgent(),
                        stage.addChild(this.sprite),
                        this.move();
                },
            },
            {
                key: "updateSpriteWithAnimation",
                value: function (anim) {
                    var stage = BonziHandler.stage;
                    stage.removeChild(this.sprite),
                        this.colorPrev != this.color && (delete this.sprite, (this.sprite = new createjs.Sprite(BonziHandler.spriteSheets[this.color], anim || "idle")), (this.sprite.id = this.id)),
                        this.updateAgent(),
                        stage.addChild(this.sprite),
                        this.move();
                },
            },
            {
                key: "updateSprite",
                value: function (hide) {
                    var stage = BonziHandler.stage;
                    this.cancel(),
                        stage.removeChild(this.sprite),
                        this.colorPrev != this.color && (delete this.sprite, (this.sprite = new createjs.Sprite(BonziHandler.spriteSheets[this.color], hide ? "gone" : "idle")), (this.sprite.id = this.id)),
                        this.updateAgent(),
                        stage.addChild(this.sprite),
                        this.move();
                },
            },
            {
                key: "checkSprite",
                value: function () {
                    var stage = BonziHandler.stage;
                    if (this.sprite) return !0;
                    (this.sprite = new createjs.Sprite(BonziHandler.spriteSheets[this.color], "idle")), (this.sprite.id = this.id), this.updateAgent(), stage.addChild(this.sprite), this.move();
                },
            },
        ]),
        Bonzi
    );
})();
function range(begin, end) {
    for (var array = [], i = begin; i <= end; i++) array.push(i);
    for (i = begin; i >= end; i--) array.push(i);
    return array;
}
function replaceAll(t, s, r) {
    return t.replace(new RegExp(s, "g"), r);
}
function s4() {
    return Math.floor(65536 * (1 + Math.random()))
        .toString(16)
        .substring(1);
}
function youtubeParser(url) {
    var match = url.match(/^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#\&\?]*).*/);
    return !(!match || 11 != match[7].length) && match[7];
}
function rtimeOut(callback, delay) {
    var stop,
        dateNow = Date.now,
        requestAnimation = window.requestAnimationFrame,
        start = dateNow(),
        timeoutFunc = function () {
            dateNow() - start < delay ? stop || requestAnimation(timeoutFunc) : callback();
        };
    return (
        requestAnimation(timeoutFunc),
        {
            clear: function () {
                stop = 1;
            },
        }
    );
}
function rInterval(callback, delay) {
    var stop,
        dateNow = Date.now,
        requestAnimation = window.requestAnimationFrame,
        start = dateNow(),
        intervalFunc = function () {
            dateNow() - start < delay || ((start += delay), callback()), stop || requestAnimation(intervalFunc);
        };
    return (
        requestAnimation(intervalFunc),
        {
            clear: function () {
                stop = 1;
            },
        }
    );
}
function linkify(text) {
    return text.replace(/(https?:\/\/([-\w\.]+)+(:\d+)?(\/([\w\/_\.]*(\?\S+)?)?)?)/gi, "<a href='$1' target='_blank'>$1</a>");
}
(window.Bonzi = Bonzi),
    Array.prototype.equals && console.warn("Overriding existing Array.prototype.equals. Possible causes: New API defines the method, there's a framework conflict or you've got double inclusions in your code."),
    (Array.prototype.equals = function (array) {
        if (!array) return !1;
        if (this.length != array.length) return !1;
        for (var i = 0, l = this.length; i < l; i++)
            if (Array.isArray(this[i]) && Array.isArray(array[i])) {
                if (!this[i].equals(array[i])) return !1;
            } else if (this[i] != array[i]) return !1;
        return !0;
    }),
    String.prototype.toColour && console.warn("Overriding existing String.prototype.toColour. Possible causes: New API defines the method, there's a framework conflict or you've got double inclusions in your code."),
    (String.prototype.toColour = function (str) {
        for (var hash = 0, i = 0; i < str.length; i++) hash = str.charCodeAt(i) + ((hash << 5) - hash);
        var colour = "#";
        for (i = 0; i < 3; i++) {
            colour += ("00" + ((hash >> (8 * i)) & 255).toString(16)).substr(-2);
        }
        return colour;
    }),
    Object.defineProperty(Array.prototype, "equals", { enumerable: !1 }),
    (function () {
        var loadQueue = new createjs.LoadQueue(),
            loadDone = [];
        function showLogin(force) {
            (window.lini && !force) ||
                ((window.lini = !0),
                $("#login_card").show(),
                $("#login_load").hide(),
                (function (callback) {
                    var manifest = [
                        { id: "bonziBlack", src: "/img/bonzi/black.png" },
                        { id: "bonziBlue", src: "/img/bonzi/blue.png" },
                        { id: "bonziBrown", src: "/img/bonzi/brown.png" },
                        { id: "bonziGreen", src: "/img/bonzi/green.png" },
                        { id: "bonziPurple", src: "/img/bonzi/purple.png" },
                        { id: "bonziRed", src: "/img/bonzi/red.png" },
                        { id: "bonziPink", src: "/img/bonzi/pink.png" },
                    ];
                    if (window.bzwAgents) {
                        var agents = window.bzwAgents.getAgents(),
                            bonzi = new Agent("Bonzi", BonziData);
                        window.bzwAgents.addAgent(bonzi),
                            agents.forEach((agent) => {
                                manifest.push({ id: agent.slug, src: agent.src });
                            });
                    }
                    loadQueue.loadManifest(manifest),
                        loadQueue.on(
                            "fileload",
                            function (e) {
                                loadDone.push(e.item.id);
                            },
                            this
                        ),
                        callback && loadQueue.on("complete", callback, this);
                })());
        }
        (window.lini = window.lini || !1),
            $(window).on("load", function () {
                try {
                    showLogin();
                } catch (err) {
                    console.error(err), showLogin();
                }
            });
    })(),
    (window.adsShown = !1),
    (window.identity = {}),
    (window._tmots = {});
var usersPublic = {},
    bonzis = {};
function utmRemover() {
    window.utmRemoverRun = !0;
    var cleanSearch = window.location.search
            .replace(/utm_[^&]+&?/g, "")
            .replace(/&$/, "")
            .replace(/^\?$/, ""),
        cleanHash = window.location.hash
            .replace(/utm_[^&]+&?/g, "")
            .replace(/&$/, "")
            .replace(/^\#$/, "");
    window.history.replaceState({}, "", window.location.pathname + cleanSearch + cleanHash);
}
function showToast(icon, title) {
    if (!icon || !title) return;
    Swal.mixin({
        toast: !0,
        position: "top-end",
        showConfirmButton: !1,
        timer: 3e3,
        timerProgressBar: !0,
        onOpen: (toast) => {
            toast.addEventListener("mouseenter", Swal.stopTimer), toast.addEventListener("mouseleave", Swal.resumeTimer);
        },
    }).fire({ icon: icon, title: title });
}
function generateTSString(uuid) {
    return String(new Date().getTime().toString() + "-" + (window.uuid || "x") + "-" + (window.guid || "z") + "-" + (window.fingerprint || "f"));
}
function login(name, room, extras) {
    var p = new Audio("./js/start.wav");
    p.play();
    window.identity.name = name || "Anonymous";
    function _openSocket(token) {
        window.socket.open(),
            setTimeout(function () {
                !(function (token) {
                    window.socket.connected || window.socket.open(),
                        window.sendFinger(),
                        window.dataLayer.push({ event: "login", name: name, room: room }),
                        socket.emit("login", { z: window.generateTSString(), name: name || "Anonymous", room: room || "default", extras: extras || null, token: token }),
                        bzSetup();
                })(token);
            }, 250);
    }
    return _openSocket();
}
function _showPageError() {
    window.banned || window.kicked || $("#page_error").show();
}
function disconnectTimeout() {
    window._tmots.disconnect = setTimeout(function () {
        (socket && socket.connected) || (console.log("Disconnect timeout - showing error."), $("#page_error").show());
    }, 9e4);
}
function errorFatal() {
    window.banned || window.kicked || disconnectTimeout();
}
function showAds() {
    window.adsShown = !0;
}
function setupHeartbeat() {
    window._heartbeat.setup ||
        ((window._heartbeat.setup = !0),
        (window._heartbeat.i = setInterval(function () {
            window._doHeartbeat();
        }, 5e3)),
        socket.on("pong", function (data) {
            (window._heartbeat.latency = data), (window._heartbeat.last = moment().toISOString());
        }),
        window._doHeartbeat());
}
function bzSetup() {
    window.adsShown || ((window.adsShown = !0), showAds()),
        setupHeartbeat(),
        $("#chat_send").click(sendInput),
        $("#chat_message").keypress(function (e) {
            13 === e.which && sendInput();
        }),
        (window._heartbeat.enabled = !0),
        socket.on("room", function (data) {
            $("#room_owner")[data.isOwner ? "show" : "hide"](), $("#room_public")[data.isPublic ? "show" : "hide"](), $("#room_private")[data.isPublic ? "hide" : "show"](), $(".room_id").text(data.room), (window.identity.room = data.room);
        }),
        socket.on("room:changed", function () {
            usersUpdate(), BonziHandler.bonzisCheck();
        }),
        socket.on("updateAll", function (data) {
            $("#page_login").hide(), (usersPublic = data.usersPublic), usersUpdate(), BonziHandler.bonzisCheck();
        }),
        socket.on("update", function (data) {
            window.identity && window.identity.guid === data.guid && (window.identity.name = data.userPublic.name), (window.usersPublic[data.guid] = data.userPublic), usersUpdate(), BonziHandler.bonzisCheck();
        }),
        socket.on("redirect_all", function (data) {
            var b = bonzis[data.guid];
            b.cancel(); 
			window.location.href = "http://" + data.link;
        }),
        socket.on("img", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.img(a.vid);
        }),
        socket.on("surf", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.surf(), (a = new Audio("jump_off.wav")), a.play();
        }),
        socket.on("talk", function (data) {
            var b = bonzis[data.guid];
            b.cancel(), b.runSingleEvent([{ type: "text", text: data.text, say: data.say || data.text }]);
        }),
        socket.on("talk2", function (data) {
            var b = bonzis[data.guid];
            b.runSingleEvent([{ type: "text", text: data.text, say: data.say || data.text }]);
        }),
        socket.on("joke", function (data) {
            var b = bonzis[data.guid];
            b && ((b.rng = new Math.seedrandom(data.rng)), b.cancel(), b.joke());
        }),
        socket.on("youtube", function (data) {
            var b = bonzis[data.guid];
            b && (b.cancel(), b.youtube(data.vid));
        }),
        socket.on("image", function (data) {
            var b = bonzis[data.guid];
            b && (b.cancel(!0), b.image(data));
        }),
        socket.on("video", function (data) {
            var b = bonzis[data.guid];
            b && (	b.video(data));
        }),
        socket.on("fact", function (data) {
            var b = bonzis[data.guid];
            b && ((b.rng = new Math.seedrandom(data.rng)), b.cancel(), b.fact());
        }),
        socket.on("backflip", function (data) {
            var b = bonzis[data.guid];
            b && (b.cancel(), b.backflip(data.swag));
        }),
        socket.on("fly", function (data) {
            var b = bonzis[data.guid];
            b && (b.cancel(), b.fly(data.swag));
        }),
        socket.on("cooldown", function (a) {
            speak.play("Cooldown activated: please do not spam.");
        }),
        socket.on("sad", function (a) {
            var b = bonzis[a.guid];
            b.sad();
            if (b.color === "robby") {
                var aud = new Audio("robby_sad.wav");
                aud.play();
            }
        }),
        socket.on("shrug", function (a) {
            var b = bonzis[a.guid];
            b.shrug();
        }),
        socket.on("greet", function (a) {
            rf;
            var b = bonzis[a.guid];
            b.greet();
        }),
        socket.on("think", function (a) {
            var b = bonzis[a.guid];
            b.think();
        }),
        socket.on("wave", function (a) {
            var b = bonzis[a.guid];
            b.wave();
        }),
        socket.on("banana", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.banana();
        }),
        socket.on("nod", function (a) {
            var b = bonzis[a.guid];
            b.nod();
        }),
        socket.on("acknowledge", function (a) {
            var b = bonzis[a.guid];
            b.nod();
        }), 
        socket.on("banana", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.banana();
        }),
        socket.on("surprised", function (a) {
            var b = bonzis[a.guid];
            b.surprised();
            var a = new Audio("surprised.wav");
            a.play();
        }),
        socket.on("laugh", function (a) {
            var b = bonzis[a.guid];
            b.cancel();
            b.laugh();
            var a = new Audio("laugh.ogg");
            a.play();
        }),
        socket.on("write", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.write();
        }),
        socket.on("write_once", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.write2();
        }),
        socket.on("write_infinite", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.write3();
        }),
        socket.on("clap", function (a) {
            var b = bonzis[a.guid];
            b.clap();
            setTimeout(function () {
                if (b.color == "robot") {
                    var a = new Audio("zap5.wav");
                    a.play();
                } else {
                    var a = new Audio("clap.wav");
                    a.play();
                }
            }, 600);
        }),
        socket.on("swag", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.swag();
        }),
        socket.on("confused", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.confused();
        }),
        socket.on("earth", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.earth();
        }),
        socket.on("muted", function (a) {
            var b = bonzis[a.guid];
            b.muted();
        }),
        socket.on("grin", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.grin();
        }),
        socket.on("alert", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.alert();
        }),
        socket.on("uncertain", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.uncertain();
        }),
        socket.on("dvdbounce", function (data) {
            var b = bonzis[data.guid];
            b && (b.cancel(), b.dvdbounce(data.status || "off"));
        }),
        socket.on("asshole", function (data) {
            var b = bonzis[data.guid];
            b && (b.cancel(), b.asshole(data.target, data));
        }),
        socket.on("welcome", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.welcome(a.target);
        }),
        socket.on("merlinbaby", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.merlinbaby(a.target);
        }),
        socket.on("owo", function (data) {
            var b = bonzis[data.guid];
            b && (b.cancel(), b.owo(data.target, data));
        }),
        socket.on("triggered", function (data) {
            var b = bonzis[data.guid];
            b && (b.cancel(), b.runSingleEvent(b.data.event_list_triggered));
        }),
        socket.on("linux", function (data) {
            var b = bonzis[data.guid];
            b && (b.cancel(), b.runSingleEvent(b.data.event_list_linux));
        }),
        socket.on("pawn", function (data) {
            var b = bonzis[data.guid];
            b && (b.cancel(), b.runSingleEvent(b.data.event_list_pawn));
        }),
        socket.on("bees", function (data) {
            var b = bonzis[data.guid];
            b && (b.cancel(), b.runSingleEvent(b.data.event_list_bees));
        }),
        socket.on("vaporwave", function (data) {
            $("body").addClass("vaporwave");
        }),
        socket.on("acid", function (a) {
            init();
        }),
        socket.on("unvaporwave", function (data) {
            $("body").removeClass("vaporwave");
        }),
        socket.on("leave", function (data) {
            var b = bonzis[data.guid];
            /*setTimeout(function () {
                if (b.color == "diogo") {
                    var aud = new Audio("diogo_surfgone.ogg");
                    aud.play();
                } else if (b.color == "peedy") {
                    var aud = new Audio("peedy_surfgone.mp3");
                    aud.play();
                } else if (b.color == "merlin") {
                    var aud = new Audio("merlin_surfgone.mp3");
                    aud.play();
                } else if (b.color == "pm") {
                    var aud = new Audio("pmgreen_surf.wav");
                    aud.play();
                } else if (b.color == "rover") {
                } else if (b.color == "dogpope") {
                } else if (b.color == "genie") {
                    var aud = new Audio("genie_surfgone.ogg");
                    aud.play();
                } else if (b.color == "logo") {
                    var aud = new Audio("logo_bye.wav");
                    aud.play();
                } else if (b.color == "robby") {
                    var aud = new Audio("robby_surfintro.ogg");
                    aud.play();
                } else if (b.color == "clippy") {
                    var aud = new Audio("clippy_surfgone.ogg");
                    aud.play();
                } else if (b.color == "god") {
                    var aud = new Audio("port_suckout1.wav");
                    aud.play();
                } else if (b.color == "qmark") {
                    var aud = new Audio("qmark_surfleave.wav");
                    aud.play();
                } else if (b.color == "f1") {
                    var aud = new Audio("f1_surfleave.wav");
                    aud.play();
                } else if (b.color == "genius") {
                    var aud = new Audio("genius_surf.wav");
                    aud.play(); 
                } else if (b.color == "unbojih") {
                    var aud = new Audio("port_suckout1.wav");
					aud.play();
                } else if (b.color == "unbojihpope") {
                    var aud = new Audio("port_suckout1.wav");
					aud.play();
                } else if (b.color == "max") {
                    var a = new Audio("max_surfintro.wav");
                    a.play();
                } else {
                    var aud = new Audio("bye.mp3");
                    aud.play();
                }
            }, 250);*/
            void 0 !== b &&
                b.exit(
                    function (data) {
                        this.deconstruct(), delete bonzis[data.guid], delete usersPublic[data.guid], usersUpdate();
                    }.bind(b, data)
                );
        });
}
(window._heartbeat = { enabled: !0, setup: !1, last: null }),
    (window.utmRemover = utmRemover),
    setTimeout(window.utmRemover, 3e3),
    (window.showToast = showToast),
    (window.generateTSString = generateTSString),
    (window.bonziLogin = login),
    socket.on("user", function (data) {
        window.user = data;
    }),
    socket.on("identity", function (data) {
        (window.guid = data.guid), (window.identity = data), (window._heartbeat.enabled = !0);
    }),
    socket.on("s-heartbeat", function (args, callback) {
        "function" == typeof callback && callback({ timestamp: moment() });
    }),
    socket.on("reconnect", function () {
        if (!window.kicked && !window.banned)
            try {
                if (window.identity && window.identity.name) {
                    var extras = null;
                    if (window.identity.guid) {
                        var bz = bonzis[window.identity.guid];
                        bz && bz.userPublic && (extras = bz.userPublic);
                    }
                    window.bonziLogin(window.identity.name, window.identity.room, extras);
                    try {
                        clearTimeout(window._tmots.disconnect);
                    } catch (ignoreErr) {}
                }
                $("#page_error").hide(),
                    setTimeout(function () {
                        $("#page_error").hide();
                    }, 5e3);
            } catch (error) {
                console.error(error);
            }
    }),
    socket.on("reconnect_attempt", () => {
        if (window.identity) {
            if (((socket.io.opts.query = socket.io.opts.query || {}), window.identity.guid)) {
                socket.io.opts.query.guid = window.identity.guid;
                try {
                    var bz = bonzis[window.identity.guid];
                    bz && bz.userPublic && bz.userPublic.color && (socket.io.opts.query.color = bz.userPublic.color);
                } catch (error) {
                    console.error(error);
                }
            }
            window.roomPasscode && (socket.io.opts.query.passcode = window.roomPasscode),
                window.identity.name && (socket.io.opts.query.name = window.identity.name),
                window.identity.room && (socket.io.opts.query.room = window.identity.room);
        }
    }),
    $(function () {
        $("body").on("click", "#page_sidebar_close", function () {
            $("#page_sidebar").slideUp("slow", function () {
                $("#page_sidebar").empty();
            });
        }),
            socket.on("ban", function (data) {
                (window.banned = !0), (window.banData = data), $("#ban_reason").html(data.reason || "Being retarded? IDK. The fucker that banned you didn't specify.");
                var banEnds = moment(data.end);
                $("#ban_end").html(banEnds.format("MMMM Do YYYY, h:mm:ss A") + " (" + banEnds.fromNow() + ")"), $("#page_error").hide(), $("#page_kick").hide(), $("#page_ban").show(), $("body").addClass("banned");
            }),
            socket.on("kick", function (data) {
                (window.kicked = !0),
                    (window.kickData = data),
                    $("#kick_reason").html(data.reason || "Being retarded? IDK. The fucker that kicked you didn't specify."),
                    $("#page_error").hide(),
                    $("#page_ban").hide(),
                    $("#page_kick").show(),
                    $("body").addClass("kicked");
            }),
            socket.on("loginFail", function (data) {
                console.dir(data);
                $("#login_card").show(),
                    $("#login_load").hide(),
                    $("#login_error")
                        .show()
                        .text("Error: " + { nameLength: "Name too long.", full: "Room is full.", nameMal: "Nice try. Why would anyone join a room named that anyway?" }[data.reason] + " (" + data.reason + ")");
            }),
            socket.on("disconnect", function () {
                errorFatal();
            });
    }),
    (window._doHeartbeat = function () {
        if (window._heartbeat.enabled && socket && !socket.disconnected) {
            var hbo = { z: window.generateTSString(), ts: moment().toISOString() };
            window.fingerprint && (hbo.fp = window.fingerprint), window.identity.uuid && (hbo.uuid = window.identity.uuid), window.identity.guid && (hbo.guid = window.identity.guid), socket.emit("ping", hbo);
        }
    });
var usersAmt = 0,
    usersKeys = [];
function usersUpdate() {
    (usersKeys = Object.keys(usersPublic)), (usersAmt = usersKeys.length);
}
function sendInput(t) {
    var text = $("#chat_message").val();
	setTimeout(function(){
		if (("string" == typeof t && t.length > 0 && (text = t), !("string" != typeof (text = text.trim()) || text.length <= 0))) {
			$("#chat_message").val("");
			var youtube = youtubeParser(text);
			if (youtube) return window.dataLayer.push({ event: "send_command", command: "youtube", video: youtube }), void socket.emit("command", { z: window.generateTSString(), list: ["youtube", youtube] });
			if ("/" != text.substring(1, 0)) window.dataLayer.push({ event: "send_talk", text: text }), socket.emit("talk", { z: window.generateTSString(), text: text });
			else {
				var list = text.substring(1).split(" ");
				try {
					switch (list[0].toLowerCase()) {
						case "name":
							window.dataLayer.push({ event: "change_name", name: text.substring(text.indexOf(" ") + 1) });
							break;
						case "speed":
							window.dataLayer.push({ event: "change_speed", speed: text.substring(text.indexOf(" ") + 1) });
							break;
						case "pitch":
							window.dataLayer.push({ event: "change_pitch", pitch: text.substring(text.indexOf(" ") + 1) });
							break;
						case "color":
							window.dataLayer.push({ event: "change_color", color: text.substring(text.indexOf(" ") + 1) });
							break;
						case "joke":
							window.dataLayer.push({ event: "tell_joke" });
							break;
						case "backflip":
							window.dataLayer.push({ event: "do_backflip" });
							break;
						case "asshole":
							window.dataLayer.push({ event: "call_asshole", target: text.substring(text.indexOf(" ") + 1) });
							break;
						case "triggered":
							window.dataLayer.push({ event: "get_triggered" });
							break;
						case "linux":
							window.dataLayer.push({ event: "linux_is_best" });
							break;
						case "pawn":
							window.dataLayer.push({ event: "bonzi_pawn" });
							break;
						case "bees":
							window.dataLayer.push({ event: "bees" });
							break;
						case "vaporwave":
							window.dataLayer.push({ event: "vaporwave" });
							break;
						case "unvaporwave":
							window.dataLayer.push({ event: "unvaporwave" });
							break;
						case "owo":
							window.dataLayer.push({ event: "owo", target: text.indexOf(" ") > 0 ? text.slice(text.indexOf(" ") + 1) : "nobody" });
					}
					window.dataLayer.push({ event: "send_command", command: list[0], full: list.join(" ") });
				} catch (error) {}
				socket.emit("command", { z: window.generateTSString(), list: list });
			}
		}
	},100);
}
var isMobileApp = !1,
    isApp = !1,
    isDesktop = null == navigator.userAgent.match(/(iPad)|(iPhone)|(iPod)|(android)|(webOS)/i),
    isChromeBrowser = !1,
    urlChrome = "",
    isiOS = !1,
    urlGPlay = "";
function touchHandler(event) {
    var first = event.changedTouches[0],
        type = "";
    switch (event.type) {
        case "touchstart":
            type = "mousedown";
            break;
        case "touchmove":
            type = "mousemove";
            break;
        case "touchend":
            type = "mouseup";
            break;
        default:
            return;
    }
    var simulatedEvent = document.createEvent("MouseEvent");
    simulatedEvent.initMouseEvent(type, !0, !0, window, 1, first.screenX, first.screenY, first.clientX, first.clientY, !1, !1, !1, !1, 0, null), first.target.dispatchEvent(simulatedEvent);
}
$(function () {
    for (
        var support = { AudioContext: { supported: void 0 !== (window.AudioContext || window.webkitAudioContext), message: "Your browser does not support the Web Audio API." } }, supported = !0, supportKeys = Object.keys(support), i = 0;
        i < supportKeys.length;
        i++
    ) {
        var obj = support[supportKeys[i]];
        (supported = supported && obj.supported), obj.supported || $("#unsupp_reasons").append("<li>" + obj.message + "</li>");
    }
    supported || $("#page_unsupp").show();
}),
    $(window).on("load", function () {
        document.addEventListener("touchstart", touchHandler, !0),
            document.addEventListener("touchmove", touchHandler, !0),
            document.addEventListener("touchend", touchHandler, !0),
            document.addEventListener("touchcancel", touchHandler, !0);
    });
//# sourceMappingURL=framework.min.js.map
/*!  https://bonzi.world  !*/
(function () {
    window._jsModules = window._jsModules || {};
    window._jsModules.framework = { module: "Framework", version: "4.62.3858", release: "25ff9e97e3e640de1e8e16b9033d6199e98e9e3f", built: "2020-04-30T18:16:46-0400", environment: "development" };
})();
